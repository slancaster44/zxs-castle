# file opened: main.asm
  1   0000                  org 8000h
  2   8000                  device zxspectrum48
  3   8000                  include "asset_binary.inc"
# file opened: ./inc/asset_binary.inc
  1+  8000
  2+  8000              cobbleTile:
  3+  8000                  incbin "assets/cobble.bin"
  4+  8008
  5+  8008              solidBlock:
  6+  8008                  incbin "assets/ink_block.bin"
  7+  8010
  8+  8010              barTile:
  9+  8010                  incbin "assets/bars.bin"
 10+  8018
 11+  8018              grassTile:
 12+  8018                  incbin "assets/grass.bin"
 13+  8020              grassSurface:
 14+  8020                  incbin "assets/grass_surface.bin"
 15+  8028
 16+  8028              skullTile:
 17+  8028                  incbin "assets/skull.bin"
 18+  8030
 19+  8030              playerSprite:
 20+  8030                  incbin "assets/player.bin"
 21+  8038
 22+  8038              emptyTile:
 23+  8038 00 00 00...      ds 8
# file closed: ./inc/asset_binary.inc
  4   8040                  include "zxs_consts.inc"
# file opened: ./inc/zxs_consts.inc
  1+  8040              ;; Character color encoding ;;;;;;;;;;;
  2+  8040              ; Usage: Or the desired attributes together
  3+  8040              ; to produce the correct encoding for a given
  4+  8040              ; pallette
  5+  8040              ;
  6+  8040              ; Example:
  7+  8040              ;   ld a, 0
  8+  8040              ;   or a, BRIGHT
  9+  8040              ;   or a, PAPER_BLUE
 10+  8040              ;   or a, INK_RED
 11+  8040              ;
 12+  8040              ; The above creates and encoding for
 13+  8040              ; a bright character with blue background
 14+  8040              ; and red foreground
 15+  8040              ;
 16+  8040              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17+  8040              FLASH   equ 10000000b
 18+  8040              BRIGHT  equ 01000000b
 19+  8040
 20+  8040              PAPER_BLACK     equ 00000000b
 21+  8040              PAPER_BLUE      equ 00001000b
 22+  8040              PAPER_RED       equ 00010000b
 23+  8040              PAPER_PINK      equ 00011000b
 24+  8040              PAPER_GREEN     equ 00100000b
 25+  8040              PAPER_CYAN      equ 00101000b
 26+  8040              PAPER_YELLOW    equ 00110000b
 27+  8040              PAPER_WHITE     equ 00111000b
 28+  8040
 29+  8040              INK_BLACK   equ 00000000b
 30+  8040              INK_BLUE    equ 00000001b
 31+  8040              INK_RED     equ 00000010b
 32+  8040              INK_PINK    equ 00000011b
 33+  8040              INK_GREEN   equ 00000100b
 34+  8040              INK_CYAN    equ 00000101b
 35+  8040              INK_YELLOW  equ 00000110b
 36+  8040              INK_WHITE   equ 00000111b
 37+  8040
 38+  8040              ;; Memory Map
 39+  8040              ROM_START   equ 0000h
 40+  8040              ROM_SIZE    equ 4000h
 41+  8040              ROM_END     equ 3FFFh
 42+  8040
 43+  8040              ;;A bitmap that indicates which pixels
 44+  8040              ;;show the paper color, and which show
 45+  8040              ;;the ink color
 46+  8040              SCREEN_BITMAP_START equ 4000h
 47+  8040              SCREEN_BITMAP_SIZE  equ 1800h
 48+  8040              SCREEN_BITMAP_END   equ 57FFh
 49+  8040
 50+  8040              ;;A tile map showing which 8x8
 51+  8040              ;;squares have which colors
 52+  8040              COLOR_ATTR_START    equ 5800h
 53+  8040              COLOR_ATTR_SIZE     equ 0300h
 54+  8040              COLOR_ATTR_END      equ 5AFFh
 55+  8040
 56+  8040              BASIC_START equ 5B00h
 57+  8040              BASIC_SIZE  equ 01CBh
 58+  8040              BASIC_END   equ 5CCAh
 59+  8040
 60+  8040              CONTENDED_USER_RAM_START    equ 5CCBh
 61+  8040              CONTENDED_USER_RAM_SIZE     equ 2335h
 62+  8040              CONTENDED_USER_RAM_END      equ 7FFFh
 63+  8040
 64+  8040              USER_RAM_START equ 8000h
 65+  8040              USER_RAM_SIZE  equ 7F58h
 66+  8040              USER_RAM_END   equ 0xFF57
 67+  8040
 68+  8040              USER_DEF_GRAPHICS_START equ 0xFF58
 69+  8040              USER_DEF_GRAPHICS_SIZE  equ 0xA7
 70+  8040              USER_DEF_GRAPHICS_END   equ 0xFFFF
 71+  8040
 72+  8040              ;; I/O Map ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 73+  8040              ;Usage: Reading from these ports will
 74+  8040              ;return a byte where a zero in the one
 75+  8040              ;of the lowest 5 bits indicates that the
 76+  8040              ;corresponding key is depressed
 77+  8040              ;
 78+  8040              ;ld bc,<key_set_to_read>
 79+  8040              ;in a, (c)
 80+  8040              ;bit <key_bit>,a ; Sets zero flag to 0 if it the given key was depressed
 81+  8040              ;
 82+  8040              READ_SHIFT_ZXCV         equ 0xFEFE
 83+  8040              KEY_BIT_SHIFT           equ 0
 84+  8040              KEY_BIT_Z               equ 1
 85+  8040              KEY_BIT_X               equ 2
 86+  8040              KEY_BIT_C               equ 3
 87+  8040              KEY_BIT_V               equ 4
 88+  8040
 89+  8040              READ_ASDFG              equ 0xFDFE
 90+  8040              KEY_BIT_A               equ 0
 91+  8040              KEY_BIT_S               equ 1
 92+  8040              KEY_BIT_D               equ 2
 93+  8040              KEY_BIT_F               equ 3
 94+  8040              KEY_BIT_G               equ 4
 95+  8040
 96+  8040              READ_QWERT              equ 0xFBFE
 97+  8040              KEY_BIT_Q               equ 0
 98+  8040              KEY_BIT_W               equ 1
 99+  8040              KEY_BIT_E               equ 2
100+  8040              KEY_BIT_R               equ 3
101+  8040              KEY_BIT_T               equ 4
102+  8040
103+  8040              READ_12345              equ 0xF7FE
104+  8040              KEY_BIT_1               equ 0
105+  8040              KEY_BIT_2               equ 1
106+  8040              KEY_BIT_3               equ 2
107+  8040              KEY_BIT_4               equ 3
108+  8040              KEY_BIT_5               equ 4
109+  8040
110+  8040              READ_09876              equ 0xEFFE
111+  8040              KEY_BIT_0               equ 0
112+  8040              KEY_BIT_9               equ 1
113+  8040              KEY_BIT_8               equ 2
114+  8040              KEY_BIT_7               equ 3
115+  8040              KEY_BIT_6               equ 4
116+  8040
117+  8040              READ_POIUY              equ 0xDFFE
118+  8040              KEY_BIT_P               equ 0
119+  8040              KEY_BIT_O               equ 1
120+  8040              KEY_BIT_I               equ 2
121+  8040              KEY_BIT_U               equ 3
122+  8040              KEY_BIT_Y               equ 4
123+  8040
124+  8040              READ_ENTER_LKJH         equ 0xBFFE
125+  8040              KEY_BIT_ENTE            equ 0
126+  8040              KEY_BIT_L               equ 1
127+  8040              KEY_BIT_K               equ 2
128+  8040              KEY_BIT_J               equ 3
129+  8040              KEY_BIT_H               equ 4
130+  8040
131+  8040              READ_SPACE_SYM_SHFT_MNB equ 0x7FFE
132+  8040              KEY_BIT_SPACE           equ 0
133+  8040              KEY_BIT_SYM             equ 1
134+  8040              KEY_BIT_M               equ 2
135+  8040              KEY_BIT_N               equ 3
136+  8040              KEY_BIT_B               equ 4
137+  8040
138+  8040
139+  8040              ;; Character Set ;;;;;;;;;;;;;;
140+  8040              ; The hex encodings for the zx spectrum character set
141+  8040
142+  8040              NEWLINE equ 0Dh
143+  8040
144+  8040
145+  8040              ;; Useful ROM Routines Provided by the Spectrum
146+  8040              ; Usage: call <routine_name> or rst <routine_name>
147+  8040              ; will jump to the space in rom that the routine exists, and
148+  8040              ; execute the routine.
149+  8040              ;
150+  8040              ; Sometimes, arguments may be passed to a
151+  8040              ; rom routine using the registers
152+  8040
153+  8040              ;; Command: call
154+  8040              ;; Arguments: None
155+  8040              ;; Description: Clears the screen
156+  8040              CLR_SCREEN equ 0DAFh
157+  8040
158+  8040              ;;Command: call
159+  8040              ;;Arguments: a
160+  8040              ;;Changes border color to color in a
161+  8040              CHANGE_BORDER equ 229Bh
162+  8040
163+  8040              ;; Command: rst
164+  8040              ;;Arguments: a register
165+  8040              ;;Description: Prints character encoded in a
166+  8040              PRINT_CHAR equ $10
167+  8040
168+  8040              ;;Multiplies hl by the immediate
169+  8040              ;;    1011 :x
170+  8040              ;;    1101 :y
171+  8040              ;;    ----
172+  8040              ;;    1011
173+  8040              ;;   00000
174+  8040              ;;  101100
175+  8040              mulhl macro imm?
176+  8040 ~                push af
177+  8040 ~                push bc
178+  8040 ~                push de
179+  8040 ~
180+  8040 ~                ld c,imm? ;;Values loaded, now hl * c
181+  8040 ~                ld b,16
182+  8040 ~
183+  8040 ~                ld de,hl    ;;de stores x-value
184+  8040 ~                ld hl,0000h ;;hl stores result
185+  8040 ~
186+  8040 ~            .loop:
187+  8040 ~                bit 0,e
188+  8040 ~                jr z,.continue
189+  8040 ~
190+  8040 ~                ld a,b
191+  8040 ~                ld b,0
192+  8040 ~                add hl,bc
193+  8040 ~                ld b,a
194+  8040 ~            .continue:
195+  8040 ~                sla c
196+  8040 ~                srl de
197+  8040 ~                djnz .loop
198+  8040 ~
199+  8040 ~            .exit:
200+  8040 ~                pop af
201+  8040 ~                pop de
202+  8040 ~                pop bc
203+  8040              endm
204+  8040
205+  8040              ;;ix contains starting address
206+  8040              ;;bc contains index
207+  8040              ;;hl contains comparision word
208+  8040              ;;WARNING: Clobbers 'a' register
209+  8040              cpdr16:
210+  8040 D5               push de
211+  8041
212+  8041              .loop:
213+  8041 DD 5E 00         ld e,(ix)
214+  8044 DD 56 01         ld d,(ix+1)
215+  8047
216+  8047 ED 52            sbc hl,de
217+  8049 CA 5C 80         jp z,.exit
218+  804C 19               add hl,de
219+  804D
220+  804D              .continue:
221+  804D DD 23            inc ix
222+  804F DD 23            inc ix
223+  8051 0B               dec bc
224+  8052 0B               dec bc
225+  8053
226+  8053 AF               xor a
227+  8054 B0               or b
228+  8055 B1               or c
229+  8056 FE 00            cp 0
230+  8058 20 E7            jr nz, .loop
231+  805A C6 01            add a, 1 ;;Clear zero flag
232+  805C
233+  805C              .exit:
234+  805C D1               pop de
235+  805D C9               ret
236+  805E
237+  805E
# file closed: ./inc/zxs_consts.inc
  5   805E                  include "getPixelAddr.inc"
# file opened: ./inc/getPixelAddr.inc
  1+  805E
  2+  805E              ;;hl :: x,y coords
  3+  805E
  4+  805E              getPixelAddr:
  5+  805E F5               push af
  6+  805F C5               push bc
  7+  8060
  8+  8060                  ;;Ld and mask out x coord
  9+  8060 7C               ld a,h
 10+  8061 CB 1F            rr a
 11+  8063 CB 1F            rr a
 12+  8065 CB 1F            rr a
 13+  8067 E6 1F            and 0b00011111
 14+  8069 47               ld b,a
 15+  806A
 16+  806A                  ;;Mask in y bits 3,4,5
 17+  806A 7D               ld a,l
 18+  806B E6 38            and 0b00111000
 19+  806D CB 17            rl a
 20+  806F CB 17            rl a
 21+  8071
 22+  8071 B0               or b ;;a now has the proper low byte
 23+  8072 45               ld b,l
 24+  8073 6F               ld l,a ;;Save low byte
 25+  8074
 26+  8074
 27+  8074 78               ld a,b ;;Gather y coord
 28+  8075 E6 07            and 0b00000111
 29+  8077 67               ld h,a
 30+  8078
 31+  8078 78               ld a,b
 32+  8079 E6 C0            and 0b11000000
 33+  807B 1F               rra
 34+  807C 1F               rra
 35+  807D 1F               rra
 36+  807E C6 40            add a,0b01000000
 37+  8080 B4               or h
 38+  8081 67               ld h,a
 39+  8082
 40+  8082 C1               pop bc
 41+  8083 F1               pop af
 42+  8084 C9               ret
# file closed: ./inc/getPixelAddr.inc
  6   8085                  include "mkScreenBlack.inc"
# file opened: ./inc/mkScreenBlack.inc
  1+  8085
  2+  8085              mkScreenBlack:
  3+  8085
  4+  8085 3E 00            ld a,PAPER_BLACK
  5+  8087 CD 9B 22         call CHANGE_BORDER
  6+  808A
  7+  808A 21 00 58         ld hl,COLOR_ATTR_START
  8+  808D 11 00 5B         ld de,COLOR_ATTR_END+1
  9+  8090 F6 07            or INK_WHITE
 10+  8092
 11+  8092 47               ld b,a
 12+  8093              .loop:
 13+  8093 70               ld (hl),b
 14+  8094 23               inc hl
 15+  8095
 16+  8095 7A               ld a,d
 17+  8096 BC               cp h
 18+  8097 C2 93 80         jp nz, .loop
 19+  809A
 20+  809A 7B               ld a,e
 21+  809B BD               cp l
 22+  809C C2 93 80         jp nz, .loop
 23+  809F
 24+  809F C9               ret
# file closed: ./inc/mkScreenBlack.inc
  7   80A0                  include "batchPaint.inc"
# file opened: ./inc/batchPaint.inc
  1+  80A0
  2+  80A0              ;;Arguments in
  3+  80A0              ;;de: start of tile info
  4+  80A0              ;;ix: start addr of coords
  5+  80A0              ;;bc: address after end of coords
  6+  80A0              batchPaint:
  7+  80A0 E5               push hl
  8+  80A1 0B               dec bc ;; And end lable will be off by one address
  9+  80A2
 10+  80A2              .loop
 11+  80A2                  ;;Get current coordinate & print
 12+  80A2 DD 66 01         ld h,(ix+1)
 13+  80A5 DD 6E 00         ld l,(ix)
 14+  80A8 CD 3A 82         call print8x8
 15+  80AB
 16+  80AB                  ;;Get next addr
 17+  80AB DD 23            inc ix
 18+  80AD DD 23            inc ix
 19+  80AF
 20+  80AF DD E5 E1         ld hl,ix
 21+  80B2 ED 42            sbc hl,bc
 22+  80B4 FA A2 80         jp m, .loop
 23+  80B7
 24+  80B7 E1               pop hl
 25+  80B8 C9               ret
 26+  80B9
 27+  80B9              ;;Arguments in
 28+  80B9              ;;a desired attribute byte
 29+  80B9              ;;ix: start addr of coords
 30+  80B9              ;;bc: address after end of coords
 31+  80B9              batchAttr:
 32+  80B9 E5               push hl
 33+  80BA 0B               dec bc
 34+  80BB
 35+  80BB              .loop
 36+  80BB DD 66 01         ld h,(ix+1)
 37+  80BE DD 6E 00         ld l,(ix)
 38+  80C1 CD 58 82         call applyAttrAt
 39+  80C4
 40+  80C4 DD 23            inc ix
 41+  80C6 DD 23            inc ix
 42+  80C8
 43+  80C8 DD E5 E1         ld hl,ix
 44+  80CB ED 42            sbc hl,bc
 45+  80CD
 46+  80CD FA BB 80         jp m, .loop
 47+  80D0
 48+  80D0              .end:
 49+  80D0 E1               pop hl
 50+  80D1 C9               ret
 51+  80D2
# file closed: ./inc/batchPaint.inc
  8   80D2                  include "paintLandscape.inc"
# file opened: ./inc/paintLandscape.inc
  1+  80D2
  2+  80D2              castleCoords:
  3+  80D2 00 00            dw 0x0000
  4+  80D4 00 10            dw 0x1000
  5+  80D6 00 20            dw 0x2000
  6+  80D8 00 30            dw 0x3000
  7+  80DA
  8+  80DA 08 00            dw 0x0008
  9+  80DC 08 08            dw 0x0808
 10+  80DE 08 10            dw 0x1008
 11+  80E0 08 18            dw 0x1808
 12+  80E2 08 20            dw 0x2008
 13+  80E4 08 28            dw 0x2808
 14+  80E6 08 30            dw 0x3008
 15+  80E8
 16+  80E8 10 08            dw 0x0810
 17+  80EA 10 10            dw 0x1010
 18+  80EC 10 18            dw 0x1810
 19+  80EE 10 20            dw 0x2010
 20+  80F0 10 28            dw 0x2810
 21+  80F2
 22+  80F2 18 08            dw 0x0818
 23+  80F4 18 10            dw 0x1018
 24+  80F6 18 18            dw 0x1818
 25+  80F8 18 20            dw 0x2018
 26+  80FA 18 28            dw 0x2818
 27+  80FC
 28+  80FC 20 08            dw 0x0820
 29+  80FE 20 10            dw 0x1020
 30+  8100 20 18            dw 0x1820
 31+  8102 20 20            dw 0x2020
 32+  8104 20 28            dw 0x2820
 33+  8106
 34+  8106 28 08            dw 0x0828
 35+  8108 28 10            dw 0x1028
 36+  810A 28 18            dw 0x1828
 37+  810C 28 20            dw 0x2028
 38+  810E 28 28            dw 0x2828
 39+  8110
 40+  8110 30 08            dw 0x0830
 41+  8112 30 10            dw 0x1030
 42+  8114 30 20            dw 0x2030
 43+  8116 30 28            dw 0x2830
 44+  8118
 45+  8118 38 08            dw 0x0838
 46+  811A 38 10            dw 0x1038
 47+  811C 38 20            dw 0x2038
 48+  811E 38 28            dw 0x2838
 49+  8120              .end
 50+  8120
 51+  8120              castleDoorCoords:
 52+  8120 30 18            dw 0x1830
 53+  8122 38 18            dw 0x1838
 54+  8124              .end
 55+  8124
 56+  8124              paintCastle:
 57+  8124 11 00 80         ld de,cobbleTile
 58+  8127 DD 21 D2 80      ld ix,castleCoords
 59+  812B 01 20 81         ld bc,castleCoords.end
 60+  812E CD A0 80         call batchPaint
 61+  8131
 62+  8131 11 10 80         ld de,barTile
 63+  8134 DD 21 20 81      ld ix,castleDoorCoords
 64+  8138 01 24 81         ld bc,castleDoorCoords.end
 65+  813B CD A0 80         call batchPaint
 66+  813E
 67+  813E 3E 10            ld a,PAPER_RED
 68+  8140 F6 06            or INK_YELLOW
 69+  8142 DD 21 20 81      ld ix,castleDoorCoords
 70+  8146 01 24 81         ld bc,castleDoorCoords.end
 71+  8149 CD B9 80         call batchAttr
 72+  814C C9               ret
 73+  814D
 74+  814D              roadCoords:
 75+  814D 40 18            dw 0x1840
 76+  814F 48 18            dw 0x1848
 77+  8151 50 18            dw 0x1850
 78+  8153 58 18            dw 0x1858
 79+  8155 58 20            dw 0x2058
 80+  8157 58 28            dw 0x2858
 81+  8159 58 30            dw 0x3058
 82+  815B 58 38            dw 0x3858
 83+  815D 58 40            dw 0x4058
 84+  815F 58 48            dw 0x4858
 85+  8161 58 50            dw 0x5058
 86+  8163 60 50            dw 0x5060
 87+  8165 68 50            dw 0x5068
 88+  8167 70 50            dw 0x5070
 89+  8169 70 58            dw 0x5870
 90+  816B 70 60            dw 0x6070
 91+  816D 70 68            dw 0x6870
 92+  816F 70 70            dw 0x7070
 93+  8171
 94+  8171 70 78            dw 0x7870
 95+  8173 70 80            dw 0x8070
 96+  8175 70 88            dw 0x8870
 97+  8177 70 90            dw 0x9070
 98+  8179 70 98            dw 0x9870
 99+  817B 70 A0            dw 0xA070
100+  817D 70 A8            dw 0xA870
101+  817F 68 A8            dw 0xA868
102+  8181 60 A8            dw 0xA860
103+  8183 58 A8            dw 0xA858
104+  8185 58 B0            dw 0xB058
105+  8187 58 B8            dw 0xB858
106+  8189 58 C0            dw 0xC058
107+  818B 58 C8            dw 0xC858
108+  818D 58 D0            dw 0xD058
109+  818F 58 D8            dw 0xD858
110+  8191 58 E0            dw 0xE058
111+  8193 58 E8            dw 0xE858
112+  8195 58 F0            dw 0xF058
113+  8197 58 FF            dw 0xFF58
114+  8199
115+  8199 78 70            dw 0x7078
116+  819B 80 70            dw 0x7080
117+  819D 88 70            dw 0x7088
118+  819F 90 70            dw 0x7090
119+  81A1 98 70            dw 0x7098
120+  81A3 A0 70            dw 0x70A0
121+  81A5 A8 70            dw 0x70A8
122+  81A7 B0 70            dw 0x70B0
123+  81A9
124+  81A9
125+  81A9              .end
126+  81A9              paintRoad:
127+  81A9 11 00 80         ld de,cobbleTile
128+  81AC DD 21 4D 81      ld ix,roadCoords
129+  81B0 01 A9 81         ld bc,roadCoords.end
130+  81B3 CD A0 80         call batchPaint
131+  81B6
132+  81B6 3E 38            ld a,PAPER_WHITE
133+  81B8 F6 00            or INK_BLACK
134+  81BA DD 21 4D 81      ld ix,roadCoords
135+  81BE 01 A9 81         ld bc,roadCoords.end
136+  81C1 CD B9 80         call batchAttr
137+  81C4 C9               ret
138+  81C5
139+  81C5              grassCoords:
140+  81C5 40 58            dw 0x5840
141+  81C7 48 F0            dw 0xF048
142+  81C9 90 28            dw 0x2890
143+  81CB 80 D0            dw 0xD080
144+  81CD              .end
145+  81CD
146+  81CD              paintGrass:
147+  81CD 11 18 80         ld de,grassTile
148+  81D0 DD 21 C5 81      ld ix,grassCoords
149+  81D4 01 CD 81         ld bc, grassCoords.end
150+  81D7 CD A0 80         call batchPaint
151+  81DA
152+  81DA 3E 00            ld a,PAPER_BLACK
153+  81DC F6 04            or INK_GREEN
154+  81DE DD 21 C5 81      ld ix,grassCoords
155+  81E2 01 CD 81         ld bc,grassCoords.end
156+  81E5 CD B9 80         call batchAttr
157+  81E8
158+  81E8 C9               ret
159+  81E9
160+  81E9              horizonCoords:
161+  81E9 30 00            dw 0x0030
162+  81EB 30 30            dw 0x3030
163+  81ED 30 38            dw 0x3830
164+  81EF 30 40            dw 0x4030
165+  81F1 30 48            dw 0x4830
166+  81F3 30 50            dw 0x5030
167+  81F5 30 58            dw 0x5830
168+  81F7 30 60            dw 0x6030
169+  81F9 30 68            dw 0x6830
170+  81FB 30 70            dw 0x7030
171+  81FD 30 78            dw 0x7830
172+  81FF 30 80            dw 0x8030
173+  8201 30 88            dw 0x8830
174+  8203 30 90            dw 0x9030
175+  8205 30 98            dw 0x9830
176+  8207 30 A0            dw 0xA030
177+  8209 30 A8            dw 0xA830
178+  820B 30 B0            dw 0xB030
179+  820D 30 B8            dw 0xB830
180+  820F 30 C0            dw 0xC030
181+  8211 30 C8            dw 0xC830
182+  8213 30 D0            dw 0xD030
183+  8215 30 D8            dw 0xD830
184+  8217 30 E0            dw 0xE030
185+  8219 30 E8            dw 0xE830
186+  821B 30 F0            dw 0xF030
187+  821D 30 FF            dw 0xFF30
188+  821F              .end
189+  821F
190+  821F              paintHorizon:
191+  821F 11 20 80         ld de,grassSurface
192+  8222 DD 21 E9 81      ld ix,horizonCoords
193+  8226 01 1F 82         ld bc,horizonCoords.end
194+  8229 CD A0 80         call batchPaint
195+  822C
196+  822C 11 20 80         ld de,grassSurface
197+  822F DD 21 E9 81      ld ix,horizonCoords
198+  8233 01 1F 82         ld bc,horizonCoords.end
199+  8236 CD B9 80         call batchAttr
200+  8239
201+  8239 C9               ret
# file closed: ./inc/paintLandscape.inc
  9   823A                  include "print8x8.inc"
# file opened: ./inc/print8x8.inc
  1+  823A
  2+  823A              ;; hl:: X,Y Off top left corner in screen ram
  3+  823A              ;; de:: start of tile information
  4+  823A              print8x8:
  5+  823A F5               push af
  6+  823B C5               push bc
  7+  823C D5               push de
  8+  823D E5               push hl
  9+  823E DD E5            push ix
 10+  8240
 11+  8240
 12+  8240 06 08            ld b,8
 13+  8242
 14+  8242              .loop:
 15+  8242 E5 DD E1         ld ix,hl
 16+  8245 CD 5E 80         call getPixelAddr
 17+  8248
 18+  8248 1A               ld a,(de)
 19+  8249 77               ld (hl),a
 20+  824A 13               inc de
 21+  824B
 22+  824B DD E5 E1         ld hl,ix
 23+  824E 2C               inc l
 24+  824F 10 F1            djnz .loop
 25+  8251
 26+  8251              .cont:
 27+  8251 DD E1            pop ix
 28+  8253 E1               pop hl
 29+  8254 D1               pop de
 30+  8255 C1               pop bc
 31+  8256 F1               pop af
 32+  8257 C9               ret
 33+  8258
 34+  8258              ;a:  the attribute to be applied
 35+  8258              ;hl: the coord of the attribute
 36+  8258              applyAttrAt:
 37+  8258 C5               push bc
 38+  8259 D5               push de
 39+  825A F5               push af
 40+  825B E5               push hl
 41+  825C
 42+  825C 4F               ld c,a ;;Save attribute
 43+  825D
 44+  825D                  ;;Divide by 8 to find attr coords
 45+  825D 7C               ld a,h
 46+  825E CB 3F            srl a
 47+  8260 CB 3F            srl a
 48+  8262 CB 3F            srl a
 49+  8264 67               ld h,a
 50+  8265
 51+  8265 7D               ld a,l
 52+  8266 CB 3F            srl a
 53+  8268 CB 3F            srl a
 54+  826A CB 3F            srl a
 55+  826C 6F               ld l,a
 56+  826D
 57+  826D              ;;hl now contains the coords of
 58+  826D              ;;the location in screen attr mem
 59+  826D              ;;we now need to convert that to
 60+  826D              ;;a linear location
 61+  826D
 62+  826D 44               ld b,h
 63+  826E 65               ld h,l
 64+  826F 68               ld l,b
 65+  8270
 66+  8270 44               ld b,h
 67+  8271 26 00            ld h,00
 68+  8273 11 20 00         ld de,32
 69+  8276              .mul_loop:
 70+  8276 19               add hl,de
 71+  8277 10 FD            djnz .mul_loop
 72+  8279
 73+  8279              ;;Apply attribute and clean up
 74+  8279 11 00 58         ld de,COLOR_ATTR_START
 75+  827C 19               add hl,de
 76+  827D 71               ld (hl),c
 77+  827E
 78+  827E 79               ld a,c
 79+  827F E1               pop hl
 80+  8280 F1               pop af
 81+  8281 D1               pop de
 82+  8282 C1               pop bc
 83+  8283 C9               ret
# file closed: ./inc/print8x8.inc
 10   8284                  include "mainLoop.inc"
# file opened: ./inc/mainLoop.inc
  1+  8284              mainLoop:
  2+  8284 CD EF 83         call monsterHandler
  3+  8287                 ; call playerHandler
  4+  8287
  5+  8287 CD 8E 82         call timeDelay
  6+  828A 18 F8            jr mainLoop
  7+  828C
  8+  828C              DelayLength:
  9+  828C FF FF            dw 0xFFFF
 10+  828E              timeDelay:
 11+  828E E5               push hl
 12+  828F F5               push af
 13+  8290
 14+  8290 AF               xor a
 15+  8291 2A 8C 82         ld hl,(DelayLength)
 16+  8294
 17+  8294              .loop:
 18+  8294 2B               dec hl
 19+  8295 BC               cp h
 20+  8296 C2 94 82         jp nz,.loop
 21+  8299 BD               cp l
 22+  829A C2 94 82         jp nz,.loop
 23+  829D
 24+  829D              .exit:
 25+  829D F1               pop af
 26+  829E E1               pop hl
 27+  829F C9               ret
 28+  82A0
# file closed: ./inc/mainLoop.inc
 11   82A0                  include "playerHandler.inc"
# file opened: ./inc/playerHandler.inc
  1+  82A0
  2+  82A0              CastleHP:
  3+  82A0 64               db 64h
  4+  82A1
  5+  82A1              Player:
  6+  82A1              .curSpriteID
  7+  82A1 00               db 00h
  8+  82A2              .curHealth
  9+  82A2 10               db 10h
 10+  82A3              .curPos
 11+  82A3 80 80            dw 8080h
 12+  82A5              .lastPos
 13+  82A5 90 90            dw 9090h
 14+  82A7              .outOfBoundsX    equ 31h
 15+  82A7              .outOfBoundsY    equ 39h
 16+  82A7
 17+  82A7              playerHandler:
 18+  82A7 CD B1 82         call MovePlayer
 19+  82AA CD 06 83         call DrawPlayer
 20+  82AD CD 20 83         call RepaintOldPlayerPosition
 21+  82B0              .exit
 22+  82B0 C9               ret
 23+  82B1
 24+  82B1              MovePlayer:
 25+  82B1 C5               push bc
 26+  82B2 F5               push af
 27+  82B3 E5               push hl
 28+  82B4
 29+  82B4 2A A3 82         ld hl,(Player.curPos)
 30+  82B7
 31+  82B7              .readInKeys:
 32+  82B7 01 FE FD         ld bc,READ_ASDFG
 33+  82BA ED 78            in a,(c)
 34+  82BC
 35+  82BC CB 47            bit KEY_BIT_A,a
 36+  82BE 28 23            jr z, .moveLeft
 37+  82C0
 38+  82C0 CB 4F            bit KEY_BIT_S,a
 39+  82C2 28 17            jr z, .moveDown
 40+  82C4
 41+  82C4 CB 57            bit KEY_BIT_D,a
 42+  82C6 28 23            jr z,.moveRight
 43+  82C8
 44+  82C8 01 FE FB         ld bc,READ_QWERT
 45+  82CB ED 78            in a,(c)
 46+  82CD CB 4F            bit KEY_BIT_W,a
 47+  82CF 28 02            jr z,.moveUp
 48+  82D1
 49+  82D1 18 2F            jr .exit
 50+  82D3
 51+  82D3              .moveUp:
 52+  82D3 44 4D            ld bc,hl ;;Save old coords in bc, so they can be saved in memory later
 53+  82D5 7D               ld a,l
 54+  82D6 D6 08            sub 08h
 55+  82D8 6F               ld l,a
 56+  82D9 18 18            jr .checkBounds
 57+  82DB              .moveDown:
 58+  82DB 44 4D            ld bc,hl
 59+  82DD 7D               ld a,l
 60+  82DE C6 08            add a,08h
 61+  82E0 6F               ld l,a
 62+  82E1 18 10            jr .checkBounds
 63+  82E3              .moveLeft:
 64+  82E3 44 4D            ld bc,hl
 65+  82E5 7C               ld a,h
 66+  82E6 D6 08            sub 08h
 67+  82E8 67               ld h,a
 68+  82E9 18 08            jr .checkBounds
 69+  82EB              .moveRight:
 70+  82EB 44 4D            ld bc,hl
 71+  82ED 7C               ld a,h
 72+  82EE C6 08            add a,08h
 73+  82F0 67               ld h,a
 74+  82F1 18 00            jr .checkBounds
 75+  82F3
 76+  82F3              .checkBounds:
 77+  82F3 7D               ld a,l
 78+  82F4 FE C0            cp 0xC0
 79+  82F6 FA FB 82         jp m,.saveAndExit
 80+  82F9
 81+  82F9 18 07            jr .exit
 82+  82FB
 83+  82FB              .saveAndExit:
 84+  82FB ED 43 A5 82      ld (Player.lastPos),bc
 85+  82FF 22 A3 82         ld (Player.curPos),hl
 86+  8302
 87+  8302              .exit
 88+  8302 E1               pop hl
 89+  8303 F1               pop af
 90+  8304 C1               pop bc
 91+  8305 C9               ret
 92+  8306
 93+  8306              DrawPlayer:
 94+  8306 E5               push hl
 95+  8307 D5               push de
 96+  8308 F5               push af
 97+  8309
 98+  8309 2A A3 82         ld hl,(Player.curPos)
 99+  830C 11 30 80         ld de,playerSprite
100+  830F CD 3A 82         call print8x8
101+  8312
102+  8312 2A A3 82         ld hl,(Player.curPos)
103+  8315 3E 38            ld a,PAPER_WHITE
104+  8317 F6 03            or INK_PINK
105+  8319 CD 58 82         call applyAttrAt
106+  831C
107+  831C              .exit:
108+  831C F1               pop af
109+  831D D1               pop de
110+  831E E1               pop hl
111+  831F C9               ret
112+  8320
113+  8320              RepaintOldPlayerPosition:
114+  8320 D5               push de
115+  8321 DD E5            push ix
116+  8323 C5               push bc
117+  8324 E5               push hl
118+  8325 F5               push af
119+  8326
120+  8326 DD 21 4D 81      ld ix,roadCoords
121+  832A 21 A9 81         ld hl,roadCoords.end
122+  832D 11 4D 81         ld de,roadCoords
123+  8330 ED 52            sbc hl,de
124+  8332 44 4D            ld bc,hl
125+  8334 2A A5 82         ld hl,(Player.lastPos)
126+  8337 CD 40 80         call cpdr16
127+  833A 28 41            jr z,.paintRoadOnOldPlayerLoc
128+  833C
129+  833C DD 21 20 81      ld ix,castleDoorCoords
130+  8340 21 24 81         ld hl,castleDoorCoords.end
131+  8343 11 20 81         ld de,castleDoorCoords
132+  8346 ED 52            sbc hl,de
133+  8348 44 4D            ld bc,hl
134+  834A 2A A5 82         ld hl,(Player.lastPos)
135+  834D CD 40 80         call cpdr16
136+  8350 28 55            jr z,.paintDoorOnOldPlayerLoc
137+  8352
138+  8352 DD 21 C5 81      ld ix,grassCoords
139+  8356 21 CD 81         ld hl,grassCoords.end
140+  8359 11 C5 81         ld de,grassCoords
141+  835C ED 52            sbc hl,de
142+  835E 44 4D            ld bc,hl
143+  8360 2A A5 82         ld hl,(Player.lastPos)
144+  8363 CD 40 80         call cpdr16
145+  8366 28 2A            jr z,.paintGrassOnOldPlayerLoc
146+  8368
147+  8368              .paintBlackOnOldPlayerLoc:
148+  8368 2A A5 82         ld hl,(Player.lastPos)
149+  836B 11 38 80         ld de,emptyTile
150+  836E CD 3A 82         call print8x8
151+  8371
152+  8371 2A A5 82         ld hl,(Player.lastPos)
153+  8374 3E 00            ld a,PAPER_BLACK
154+  8376 F6 07            or INK_WHITE
155+  8378 CD 58 82         call applyAttrAt
156+  837B
157+  837B 18 3F            jr .exit
158+  837D
159+  837D              .paintRoadOnOldPlayerLoc:
160+  837D 2A A5 82         ld hl,(Player.lastPos)
161+  8380 11 00 80         ld de,cobbleTile
162+  8383 CD 3A 82         call print8x8
163+  8386
164+  8386
165+  8386 2A A5 82         ld hl,(Player.lastPos)
166+  8389 3E 38            ld a,PAPER_WHITE
167+  838B F6 00            or INK_BLACK
168+  838D CD 58 82         call applyAttrAt
169+  8390
170+  8390 18 2A            jr .exit
171+  8392
172+  8392              .paintGrassOnOldPlayerLoc:
173+  8392 2A A5 82         ld hl,(Player.lastPos)
174+  8395 11 18 80         ld de, grassTile
175+  8398 CD 3A 82         call print8x8
176+  839B
177+  839B 2A A5 82         ld hl,(Player.lastPos)
178+  839E 3E 00            ld a,PAPER_BLACK
179+  83A0 F6 04            or INK_GREEN
180+  83A2 CD 58 82         call applyAttrAt
181+  83A5
182+  83A5 18 15            jr .exit
183+  83A7
184+  83A7              .paintDoorOnOldPlayerLoc:
185+  83A7 2A A5 82         ld hl,(Player.lastPos)
186+  83AA 11 10 80         ld de,barTile
187+  83AD CD 3A 82         call print8x8
188+  83B0
189+  83B0 2A A5 82         ld hl,(Player.lastPos)
190+  83B3 3E 10            ld a,PAPER_RED
191+  83B5 F6 06            or INK_YELLOW
192+  83B7 CD 58 82         call applyAttrAt
193+  83BA
194+  83BA 18 00            jr .exit
195+  83BC              .exit
196+  83BC F1               pop af
197+  83BD E1               pop hl
198+  83BE C1               pop bc
199+  83BF DD E1            pop ix
200+  83C1 D1               pop de
201+  83C2 C9               ret
# file closed: ./inc/playerHandler.inc
 12   83C3
 13   83C3              start:
 14   83C3 ED 56            im 1
 15   83C5 31 57 FF         ld sp,USER_RAM_END
 16   83C8
 17   83C8 CD AF 0D         call CLR_SCREEN
 18   83CB CD 85 80         call mkScreenBlack
 19   83CE CD 24 81         call paintCastle
 20   83D1 CD A9 81         call paintRoad
 21   83D4 CD CD 81         call paintGrass
 22   83D7 CD 1F 82         call paintHorizon
 23   83DA
 24   83DA 0E 01            ld c,1
 25   83DC 16 03            ld d,03h
 26   83DE 1E 01            ld e,1
 27   83E0 CD F9 83         call AllocMonster
 28   83E3
 29   83E3 0E 02            ld c,2
 30   83E5 16 05            ld d,05h
 31   83E7 1E 00            ld e,0
 32   83E9 CD F9 83         call AllocMonster
 33   83EC
 34   83EC CD 84 82         call mainLoop
 35   83EF
 36   83EF                  include "monster.inc"
# file opened: ./inc/monster.inc
  1+  83EF              ;;Add any new monsters
  2+  83EF              ;;Remove any dead monsters
  3+  83EF              ;;Update monster positions
  4+  83EF              ;;Redraw monsters
  5+  83EF              monsterHandler:
  6+  83EF              .clearTheDead:
  7+  83EF CD 38 84         call ClearDeadMonsters
  8+  83F2
  9+  83F2              .drawMonsters:
 10+  83F2 CD FF 84         call DrawMonsterHeap
 11+  83F5
 12+  83F5              .moveMonsters:
 13+  83F5 CD 94 85         call UpdateMonsterPositions
 14+  83F8
 15+  83F8              .exit:
 16+  83F8 C9               ret
 17+  83F9
 18+  83F9
 19+  83F9
 20+  83F9              ;;Monster Heap Entry Format
 21+  83F9              ;; Byte 0: Monster Sprite
 22+  83F9              ;; Byte 1: Health Point of Monster
 23+  83F9              ;; Byte 2: The path the monster is taking
 24+  83F9              ;; Byte 3: Index in path the monster is on
 25+  83F9
 26+  83F9              ;; Arguments:
 27+  83F9              ;; c: Sprite
 28+  83F9              ;; d: Health Points
 29+  83F9              ;; e: path
 30+  83F9              AllocMonster:
 31+  83F9 C5               push bc
 32+  83FA DD E5            push ix
 33+  83FC
 34+  83FC DD 21 39 86      ld ix,MonsterHeap.startOfHeap
 35+  8400
 36+  8400 3A 38 86         ld a,(MonsterHeap.numActiveMonsters)
 37+  8403 FE 00            cp 0
 38+  8405 28 0B            jr z, .insertDataToHeap
 39+  8407
 40+  8407 47               ld b,a
 41+  8408              .addrCalcLoop
 42+  8408 DD 23            inc ix
 43+  840A DD 23            inc ix
 44+  840C DD 23            inc ix
 45+  840E DD 23            inc ix
 46+  8410
 47+  8410 10 F6            djnz .addrCalcLoop
 48+  8412
 49+  8412              .insertDataToHeap
 50+  8412 DD 71 00         ld (ix),c
 51+  8415 DD 72 01         ld (ix+1),d
 52+  8418 DD 73 02         ld (ix+2),e
 53+  841B DD 36 03 00      ld (ix+3),0 ;Start monster on start of path
 54+  841F
 55+  841F DD 54 DD 5D      ld de,ix
 56+  8423 DD 21 36 86      ld ix,MonsterHeap.locOfLastMonster
 57+  8427 DD 73 00 DD      ld (ix),de
 57+  842B 72 01
 58+  842D
 59+  842D DD 21 38 86      ld ix,MonsterHeap.numActiveMonsters
 60+  8431 DD 34 00         inc (ix)
 61+  8434
 62+  8434              .exit
 63+  8434 DD E1            pop ix
 64+  8436 C1               pop bc
 65+  8437 C9               ret
 66+  8438
 67+  8438              ClearDeadMonsters:
 68+  8438 DD E5            push ix
 69+  843A C5               push bc
 70+  843B F5               push af
 71+  843C FD E5            push iy
 72+  843E D5               push de
 73+  843F E5               push hl
 74+  8440
 75+  8440 3A 38 86         ld a,(MonsterHeap.numActiveMonsters)
 76+  8443 FE 00            cp 0
 77+  8445 CA F6 84         jp z, .exit
 78+  8448
 79+  8448 47               ld b,a
 80+  8449 DD 21 39 86      ld ix,MonsterHeap.startOfHeap
 81+  844D
 82+  844D              .loop:
 83+  844D 3A 38 86         ld a,(MonsterHeap.numActiveMonsters)
 84+  8450 FE 01            cp 1
 85+  8452 28 61            jr z, .clearLastMonster
 86+  8454
 87+  8454 DD 7E 01         ld a,(ix+1) ;;Load in health of current monster
 88+  8457 FE 00            cp 0
 89+  8459 20 4E            jr nz, .continue
 90+  845B
 91+  845B              .drawOverDeadMonster:
 92+  845B DD 66 02         ld h,(ix+2)
 93+  845E DD 6E 03         ld l,(ix+3)
 94+  8461 2D               dec l
 95+  8462
 96+  8462 CD 6B 85         call getPathCoords
 97+  8465 11 00 80         ld de,cobbleTile
 98+  8468 CD 3A 82         call print8x8
 99+  846B
100+  846B 3E 38            ld a,PAPER_WHITE
101+  846D F6 00            or INK_BLACK
102+  846F CD 58 82         call applyAttrAt
103+  8472
104+  8472              .decMonsterCount:
105+  8472 FD 2A 36 86      ld iy,(MonsterHeap.locOfLastMonster)
106+  8476
107+  8476 FD 4E 00         ld c,(iy)
108+  8479 DD 71 00         ld (ix),c
109+  847C
110+  847C FD 4E 01         ld c,(iy+1)
111+  847F DD 71 01         ld (ix+1),c
112+  8482
113+  8482 FD 4E 02         ld c,(iy+2)
114+  8485 DD 71 02         ld (ix+2),c
115+  8488
116+  8488 FD 4E 03         ld c,(iy+3)
117+  848B DD 71 03         ld (ix+3),c
118+  848E
119+  848E FD 21 36 86      ld iy,MonsterHeap.locOfLastMonster
120+  8492 FD 35 00         dec (iy)
121+  8495 FD 35 00         dec (iy)
122+  8498 FD 35 00         dec (iy)
123+  849B FD 35 00         dec (iy)
124+  849E
125+  849E FD 21 38 86      ld iy, MonsterHeap.numActiveMonsters
126+  84A2 FD 35 00         dec (iy)
127+  84A5
128+  84A5 10 A6            djnz .loop
129+  84A7 18 4D            jr .exit
130+  84A9
131+  84A9              .continue
132+  84A9 DD 23            inc ix
133+  84AB DD 23            inc ix
134+  84AD DD 23            inc ix
135+  84AF DD 23            inc ix
136+  84B1 10 9A            djnz .loop
137+  84B3 18 41            jr .exit
138+  84B5
139+  84B5              .clearLastMonster:
140+  84B5                  ;;If monster is not dead, jump to exit
141+  84B5 DD 21 39 86      ld ix, MonsterHeap.startOfHeap
142+  84B9 DD 7E 01         ld a,(ix+1)
143+  84BC FE 00            cp 0
144+  84BE C2 F6 84         jp nz, .exit
145+  84C1
146+  84C1 DD 66 02         ld h,(ix+2)
147+  84C4 DD 6E 03         ld l,(ix+3)
148+  84C7 2D               dec l
149+  84C8
150+  84C8 CD 6B 85         call getPathCoords
151+  84CB 11 00 80         ld de,cobbleTile
152+  84CE CD 3A 82         call print8x8
153+  84D1
154+  84D1 3E 38            ld a,PAPER_WHITE
155+  84D3 F6 00            or INK_BLACK
156+  84D5 CD 58 82         call applyAttrAt
157+  84D8
158+  84D8 FD 21 36 86      ld iy,MonsterHeap.locOfLastMonster
159+  84DC FD 35 00         dec (iy)
160+  84DF FD 35 00         dec (iy)
161+  84E2 FD 35 00         dec (iy)
162+  84E5 FD 35 00         dec (iy)
163+  84E8
164+  84E8 DD 21 38 86      ld ix, MonsterHeap.numActiveMonsters
165+  84EC DD 35 00         dec (ix)
166+  84EF
167+  84EF DD 66 02         ld h,(ix+2)
168+  84F2 DD 6E 03         ld l,(ix+3)
169+  84F5 2D               dec l
170+  84F6
171+  84F6              .exit:
172+  84F6 E1               pop hl
173+  84F7 D1               pop de
174+  84F8 FD E1            pop iy
175+  84FA F1               pop af
176+  84FB C1               pop bc
177+  84FC DD E1            pop ix
178+  84FE C9               ret
179+  84FF
180+  84FF              DrawMonsterHeap:
181+  84FF DD E5            push ix
182+  8501 F5               push af
183+  8502 C5               push bc
184+  8503 E5               push hl
185+  8504 D5               push de
186+  8505 FD E5            push iy
187+  8507
188+  8507 DD 21 39 86      ld ix, MonsterHeap.startOfHeap
189+  850B 3A 38 86         ld a, (MonsterHeap.numActiveMonsters)
190+  850E FE 00            cp 0
191+  8510 CA 62 85         jp z, .exit
192+  8513
193+  8513 47               ld b,a
194+  8514
195+  8514              .loop:
196+  8514 DD 66 02         ld h,(ix+2) ;;Id of path monster is on
197+  8517 DD 6E 03         ld l,(ix+3) ;;Index on path monster is taking
198+  851A
199+  851A CD 6B 85         call getPathCoords ;Convert path info to coordinates
200+  851D                  ;;hl now has coords
201+  851D
202+  851D                  ;;If we are on the last coord, then the monster
203+  851D                  ;;is at the end of it's path
204+  851D ED 5B B6 85      ld de,(monsterPathOne) ;;
205+  8521 ED 52            sbc hl,de
206+  8523 20 0B            jr nz, .drawMonster
207+  8525
208+  8525              .killMonsterAtEndOfPath:
209+  8525 DD 36 01 00      ld (ix+1),0
210+  8529 FD 21 A0 82      ld iy,CastleHP
211+  852D FD 35 00         dec (iy)
212+  8530
213+  8530              .drawMonster:
214+  8530 19               add hl,de
215+  8531 11 28 80         ld de,skullTile
216+  8534 CD 3A 82         call print8x8
217+  8537
218+  8537 3E 38            ld a,PAPER_WHITE
219+  8539 F6 02            or INK_RED
220+  853B CD 58 82         call applyAttrAt
221+  853E
222+  853E              .reDrawOldLocation:
223+  853E DD 66 02         ld h,(ix+2)
224+  8541 DD 6E 03         ld l,(ix+3)
225+  8544 2D               dec l
226+  8545
227+  8545 FA 58 85         jp m, .continue
228+  8548
229+  8548 CD 6B 85         call getPathCoords
230+  854B 11 00 80         ld de,cobbleTile
231+  854E CD 3A 82         call print8x8
232+  8551
233+  8551 3E 38            ld a,PAPER_WHITE
234+  8553 F6 00            or INK_BLACK
235+  8555 CD 58 82         call applyAttrAt
236+  8558
237+  8558              .continue
238+  8558 DD 23            inc ix
239+  855A DD 23            inc ix
240+  855C DD 23            inc ix
241+  855E DD 23            inc ix
242+  8560 10 B2            djnz .loop
243+  8562
244+  8562              .exit:
245+  8562 FD E1            pop iy
246+  8564 D1               pop de
247+  8565 E1               pop hl
248+  8566 C1               pop bc
249+  8567 F1               pop af
250+  8568 DD E1            pop ix
251+  856A C9               ret
252+  856B
253+  856B              getPathCoords:
254+  856B F5               push af
255+  856C D5               push de
256+  856D
257+  856D 54 5D            ld de,hl
258+  856F 13               inc de
259+  8570
260+  8570              .getPathInfoAddr:
261+  8570 7C               ld a,h
262+  8571 FE 00            cp 0
263+  8573 28 04            jr z, .ldPathOne
264+  8575
265+  8575 FE 01            cp 1
266+  8577 28 05            jr z, .ldPathTwo
267+  8579
268+  8579              .ldPathOne:
269+  8579 21 EA 85         ld hl, monsterPathOne.end
270+  857C 18 05            jr .addIndex
271+  857E
272+  857E              .ldPathTwo:
273+  857E 21 36 86         ld hl, monsterPathTwo.end
274+  8581 18 00            jr .addIndex
275+  8583
276+  8583              .addIndex:
277+  8583 16 00            ld d,0
278+  8585 B7 ED 52         sub hl,de
279+  8588 B7 ED 52         sub hl,de
280+  858B 5E 23 56 2B      ld de,(hl)
281+  858F 62 6B            ld hl,de
282+  8591
283+  8591              .exit:
284+  8591 D1               pop de
285+  8592 F1               pop af
286+  8593 C9               ret
287+  8594
288+  8594              UpdateMonsterPositions:
289+  8594 DD E5            push ix
290+  8596 C5               push bc
291+  8597 F5               push af
292+  8598
293+  8598 3A 38 86         ld a,(MonsterHeap.numActiveMonsters)
294+  859B FE 00            cp 0
295+  859D 28 12            jr z, .exit
296+  859F
297+  859F 47               ld b,a
298+  85A0
299+  85A0 DD 21 39 86      ld ix,MonsterHeap.startOfHeap
300+  85A4              .loop:
301+  85A4 DD 34 03         inc (ix+3)
302+  85A7
303+  85A7 DD 23            inc ix
304+  85A9 DD 23            inc ix
305+  85AB DD 23            inc ix
306+  85AD DD 23            inc ix
307+  85AF 10 F3            djnz .loop
308+  85B1
309+  85B1              .exit:
310+  85B1 F1               pop af
311+  85B2 C1               pop bc
312+  85B3 DD E1            pop ix
313+  85B5 C9               ret
314+  85B6
315+  85B6
316+  85B6              monsterPathOne:
317+  85B6 40 18            dw 0x1840
318+  85B8 48 18            dw 0x1848
319+  85BA 50 18            dw 0x1850
320+  85BC 58 18            dw 0x1858
321+  85BE 58 20            dw 0x2058
322+  85C0 58 28            dw 0x2858
323+  85C2 58 30            dw 0x3058
324+  85C4 58 38            dw 0x3858
325+  85C6 58 40            dw 0x4058
326+  85C8 58 48            dw 0x4858
327+  85CA 58 50            dw 0x5058
328+  85CC 60 50            dw 0x5060
329+  85CE 68 50            dw 0x5068
330+  85D0 70 50            dw 0x5070
331+  85D2 70 58            dw 0x5870
332+  85D4 70 60            dw 0x6070
333+  85D6 70 68            dw 0x6870
334+  85D8
335+  85D8 70 70            dw 0x7070
336+  85DA 78 70            dw 0x7078
337+  85DC 80 70            dw 0x7080
338+  85DE 88 70            dw 0x7088
339+  85E0 90 70            dw 0x7090
340+  85E2 98 70            dw 0x7098
341+  85E4 A0 70            dw 0x70A0
342+  85E6 A8 70            dw 0x70A8
343+  85E8 B0 70            dw 0x70B0
344+  85EA
345+  85EA              .end
346+  85EA
347+  85EA              monsterPathTwo:
348+  85EA 40 18            dw 0x1840
349+  85EC 48 18            dw 0x1848
350+  85EE 50 18            dw 0x1850
351+  85F0 58 18            dw 0x1858
352+  85F2 58 20            dw 0x2058
353+  85F4 58 28            dw 0x2858
354+  85F6 58 30            dw 0x3058
355+  85F8 58 38            dw 0x3858
356+  85FA 58 40            dw 0x4058
357+  85FC 58 48            dw 0x4858
358+  85FE 58 50            dw 0x5058
359+  8600 60 50            dw 0x5060
360+  8602 68 50            dw 0x5068
361+  8604 70 50            dw 0x5070
362+  8606 70 58            dw 0x5870
363+  8608 70 60            dw 0x6070
364+  860A 70 68            dw 0x6870
365+  860C 70 70            dw 0x7070
366+  860E
367+  860E 70 78            dw 0x7870
368+  8610 70 80            dw 0x8070
369+  8612 70 88            dw 0x8870
370+  8614 70 90            dw 0x9070
371+  8616 70 98            dw 0x9870
372+  8618 70 A0            dw 0xA070
373+  861A 70 A8            dw 0xA870
374+  861C 68 A8            dw 0xA868
375+  861E 60 A8            dw 0xA860
376+  8620 58 A8            dw 0xA858
377+  8622 58 B0            dw 0xB058
378+  8624 58 B8            dw 0xB858
379+  8626 58 C0            dw 0xC058
380+  8628 58 C8            dw 0xC858
381+  862A 58 D0            dw 0xD058
382+  862C 58 D8            dw 0xD858
383+  862E 58 E0            dw 0xE058
384+  8630 58 E8            dw 0xE858
385+  8632 58 F0            dw 0xF058
386+  8634 58 FF            dw 0xFF58
387+  8636              .end
388+  8636
389+  8636              MonsterHeap:
390+  8636              .locOfLastMonster:
391+  8636 00 00            dw 0000h
392+  8638              .numActiveMonsters:
393+  8638 00               db 00h
394+  8639              .startOfHeap
395+  8639
396+  8639                  savesna "out.sna",start
# file closed: ./inc/monster.inc
 37   8639
# file closed: main.asm
