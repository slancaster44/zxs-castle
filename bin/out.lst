# file opened: ./main.asm
  1   0000                  org 8000h
  2   8000                  device zxspectrum48
  3   8000                  include "asset_binary.inc"
# file opened: ./inc/asset_binary.inc
  1+  8000
  2+  8000              cobbleTile:
  3+  8000                  incbin "assets/cobble.bin"
  4+  8008
  5+  8008              solidBlock:
  6+  8008                  incbin "assets/ink_block.bin"
  7+  8010
  8+  8010              barTile:
  9+  8010                  incbin "assets/bars.bin"
 10+  8018
 11+  8018              grassTile:
 12+  8018                  incbin "assets/grass.bin"
 13+  8020              grassSurface:
 14+  8020                  incbin "assets/grass_surface.bin"
 15+  8028
 16+  8028              skullTile:
 17+  8028                  incbin "assets/skull.bin"
 18+  8030
 19+  8030              playerSprite:
 20+  8030                  incbin "assets/player.bin"
 21+  8038
 22+  8038              emptyTile:
 23+  8038 00 00 00...      ds 8
# file closed: ./inc/asset_binary.inc
  4   8040                  include "zxs_consts.inc"
# file opened: ./inc/zxs_consts.inc
  1+  8040              ;; Character color encoding ;;;;;;;;;;;
  2+  8040              ; Usage: Or the desired attributes together
  3+  8040              ; to produce the correct encoding for a given
  4+  8040              ; pallette
  5+  8040              ;
  6+  8040              ; Example:
  7+  8040              ;   ld a, 0
  8+  8040              ;   or a, BRIGHT
  9+  8040              ;   or a, PAPER_BLUE
 10+  8040              ;   or a, INK_RED
 11+  8040              ;
 12+  8040              ; The above creates and encoding for
 13+  8040              ; a bright character with blue background
 14+  8040              ; and red foreground
 15+  8040              ;
 16+  8040              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17+  8040              FLASH   equ 10000000b
 18+  8040              BRIGHT  equ 01000000b
 19+  8040
 20+  8040              PAPER_BLACK     equ 00000000b
 21+  8040              PAPER_BLUE      equ 00001000b
 22+  8040              PAPER_RED       equ 00010000b
 23+  8040              PAPER_PINK      equ 00011000b
 24+  8040              PAPER_GREEN     equ 00100000b
 25+  8040              PAPER_CYAN      equ 00101000b
 26+  8040              PAPER_YELLOW    equ 00110000b
 27+  8040              PAPER_WHITE     equ 00111000b
 28+  8040
 29+  8040              INK_BLACK   equ 00000000b
 30+  8040              INK_BLUE    equ 00000001b
 31+  8040              INK_RED     equ 00000010b
 32+  8040              INK_PINK    equ 00000011b
 33+  8040              INK_GREEN   equ 00000100b
 34+  8040              INK_CYAN    equ 00000101b
 35+  8040              INK_YELLOW  equ 00000110b
 36+  8040              INK_WHITE   equ 00000111b
 37+  8040
 38+  8040              ;; Memory Map
 39+  8040              ROM_START   equ 0000h
 40+  8040              ROM_SIZE    equ 4000h
 41+  8040              ROM_END     equ 3FFFh
 42+  8040
 43+  8040              ;;A bitmap that indicates which pixels
 44+  8040              ;;show the paper color, and which show
 45+  8040              ;;the ink color
 46+  8040              SCREEN_BITMAP_START equ 4000h
 47+  8040              SCREEN_BITMAP_SIZE  equ 1800h
 48+  8040              SCREEN_BITMAP_END   equ 57FFh
 49+  8040
 50+  8040              ;;A tile map showing which 8x8
 51+  8040              ;;squares have which colors
 52+  8040              COLOR_ATTR_START    equ 5800h
 53+  8040              COLOR_ATTR_SIZE     equ 0300h
 54+  8040              COLOR_ATTR_END      equ 5AFFh
 55+  8040
 56+  8040              BASIC_START equ 5B00h
 57+  8040              BASIC_SIZE  equ 01CBh
 58+  8040              BASIC_END   equ 5CCAh
 59+  8040
 60+  8040              CONTENDED_USER_RAM_START    equ 5CCBh
 61+  8040              CONTENDED_USER_RAM_SIZE     equ 2335h
 62+  8040              CONTENDED_USER_RAM_END      equ 7FFFh
 63+  8040
 64+  8040              USER_RAM_START equ 8000h
 65+  8040              USER_RAM_SIZE  equ 7F58h
 66+  8040              USER_RAM_END   equ 0xFF57
 67+  8040
 68+  8040              USER_DEF_GRAPHICS_START equ 0xFF58
 69+  8040              USER_DEF_GRAPHICS_SIZE  equ 0xA7
 70+  8040              USER_DEF_GRAPHICS_END   equ 0xFFFF
 71+  8040
 72+  8040              ;; I/O Map ;;;;;;;;;;;;;;;;;;;;;;;;;;;
 73+  8040              ;Usage: Reading from these ports will
 74+  8040              ;return a byte where a zero in the one
 75+  8040              ;of the lowest 5 bits indicates that the
 76+  8040              ;corresponding key is depressed
 77+  8040              ;
 78+  8040              ;ld bc,<key_set_to_read>
 79+  8040              ;in a, (c)
 80+  8040              ;bit <key_bit>,a ; Sets zero flag to 0 if it the given key was depressed
 81+  8040              ;
 82+  8040              READ_SHIFT_ZXCV         equ 0xFEFE
 83+  8040              KEY_BIT_SHIFT           equ 0
 84+  8040              KEY_BIT_Z               equ 1
 85+  8040              KEY_BIT_X               equ 2
 86+  8040              KEY_BIT_C               equ 3
 87+  8040              KEY_BIT_V               equ 4
 88+  8040
 89+  8040              READ_ASDFG              equ 0xFDFE
 90+  8040              KEY_BIT_A               equ 0
 91+  8040              KEY_BIT_S               equ 1
 92+  8040              KEY_BIT_D               equ 2
 93+  8040              KEY_BIT_F               equ 3
 94+  8040              KEY_BIT_G               equ 4
 95+  8040
 96+  8040              READ_QWERT              equ 0xFBFE
 97+  8040              KEY_BIT_Q               equ 0
 98+  8040              KEY_BIT_W               equ 1
 99+  8040              KEY_BIT_E               equ 2
100+  8040              KEY_BIT_R               equ 3
101+  8040              KEY_BIT_T               equ 4
102+  8040
103+  8040              READ_12345              equ 0xF7FE
104+  8040              KEY_BIT_1               equ 0
105+  8040              KEY_BIT_2               equ 1
106+  8040              KEY_BIT_3               equ 2
107+  8040              KEY_BIT_4               equ 3
108+  8040              KEY_BIT_5               equ 4
109+  8040
110+  8040              READ_09876              equ 0xEFFE
111+  8040              KEY_BIT_0               equ 0
112+  8040              KEY_BIT_9               equ 1
113+  8040              KEY_BIT_8               equ 2
114+  8040              KEY_BIT_7               equ 3
115+  8040              KEY_BIT_6               equ 4
116+  8040
117+  8040              READ_POIUY              equ 0xDFFE
118+  8040              KEY_BIT_P               equ 0
119+  8040              KEY_BIT_O               equ 1
120+  8040              KEY_BIT_I               equ 2
121+  8040              KEY_BIT_U               equ 3
122+  8040              KEY_BIT_Y               equ 4
123+  8040
124+  8040              READ_ENTER_LKJH         equ 0xBFFE
125+  8040              KEY_BIT_ENTE            equ 0
126+  8040              KEY_BIT_L               equ 1
127+  8040              KEY_BIT_K               equ 2
128+  8040              KEY_BIT_J               equ 3
129+  8040              KEY_BIT_H               equ 4
130+  8040
131+  8040              READ_SPACE_SYM_SHFT_MNB equ 0x7FFE
132+  8040              KEY_BIT_SPACE           equ 0
133+  8040              KEY_BIT_SYM             equ 1
134+  8040              KEY_BIT_M               equ 2
135+  8040              KEY_BIT_N               equ 3
136+  8040              KEY_BIT_B               equ 4
137+  8040
138+  8040
139+  8040              ;; Character Set ;;;;;;;;;;;;;;
140+  8040              ; The hex encodings for the zx spectrum character set
141+  8040
142+  8040              NEWLINE equ 0Dh
143+  8040
144+  8040
145+  8040              ;; Useful ROM Routines Provided by the Spectrum
146+  8040              ; Usage: call <routine_name> or rst <routine_name>
147+  8040              ; will jump to the space in rom that the routine exists, and
148+  8040              ; execute the routine.
149+  8040              ;
150+  8040              ; Sometimes, arguments may be passed to a
151+  8040              ; rom routine using the registers
152+  8040
153+  8040              ;; Command: call
154+  8040              ;; Arguments: None
155+  8040              ;; Description: Clears the screen
156+  8040              CLR_SCREEN equ 0DAFh
157+  8040
158+  8040              ;;Command: call
159+  8040              ;;Arguments: a
160+  8040              ;;Changes border color to color in a
161+  8040              CHANGE_BORDER equ 229Bh
162+  8040
163+  8040              ;; Command: rst
164+  8040              ;;Arguments: a register
165+  8040              ;;Description: Prints character encoded in a
166+  8040              PRINT_CHAR equ $10
167+  8040
168+  8040              ;;Multiplies hl by the immediate
169+  8040              ;;    1011 :x
170+  8040              ;;    1101 :y
171+  8040              ;;    ----
172+  8040              ;;    1011
173+  8040              ;;   00000
174+  8040              ;;  101100
175+  8040              mulhl macro imm?
176+  8040 ~                push af
177+  8040 ~                push bc
178+  8040 ~                push de
179+  8040 ~
180+  8040 ~                ld c,imm? ;;Values loaded, now hl * c
181+  8040 ~                ld b,16
182+  8040 ~
183+  8040 ~                ld de,hl    ;;de stores x-value
184+  8040 ~                ld hl,0000h ;;hl stores result
185+  8040 ~
186+  8040 ~            .loop:
187+  8040 ~                bit 0,e
188+  8040 ~                jr z,.continue
189+  8040 ~
190+  8040 ~                ld a,b
191+  8040 ~                ld b,0
192+  8040 ~                add hl,bc
193+  8040 ~                ld b,a
194+  8040 ~            .continue:
195+  8040 ~                sla c
196+  8040 ~                srl de
197+  8040 ~                djnz .loop
198+  8040 ~
199+  8040 ~            .exit:
200+  8040 ~                pop af
201+  8040 ~                pop de
202+  8040 ~                pop bc
203+  8040              endm
204+  8040
205+  8040              ;;ix contains starting address
206+  8040              ;;bc contains index
207+  8040              ;;hl contains comparision word
208+  8040              ;;WARNING: Clobbers 'a' register
209+  8040              cpdr16:
210+  8040 D5               push de
211+  8041
212+  8041              .loop:
213+  8041 DD 5E 00         ld e,(ix)
214+  8044 DD 56 01         ld d,(ix+1)
215+  8047
216+  8047 ED 52            sbc hl,de
217+  8049 CA 5C 80         jp z,.exit
218+  804C 19               add hl,de
219+  804D
220+  804D              .continue:
221+  804D DD 23            inc ix
222+  804F DD 23            inc ix
223+  8051 0B               dec bc
224+  8052 0B               dec bc
225+  8053
226+  8053 AF               xor a
227+  8054 B0               or b
228+  8055 B1               or c
229+  8056 FE 00            cp 0
230+  8058 20 E7            jr nz, .loop
231+  805A C6 01            add a, 1 ;;Clear zero flag
232+  805C
233+  805C              .exit:
234+  805C D1               pop de
235+  805D C9               ret
236+  805E
237+  805E
# file closed: ./inc/zxs_consts.inc
  5   805E                  include "getPixelAddr.inc"
# file opened: ./inc/getPixelAddr.inc
  1+  805E
  2+  805E              ;;hl :: x,y coords
  3+  805E
  4+  805E              getPixelAddr:
  5+  805E F5               push af
  6+  805F C5               push bc
  7+  8060
  8+  8060                  ;;Ld and mask out x coord
  9+  8060 7C               ld a,h
 10+  8061 CB 1F            rr a
 11+  8063 CB 1F            rr a
 12+  8065 CB 1F            rr a
 13+  8067 E6 1F            and 0b00011111
 14+  8069 47               ld b,a
 15+  806A
 16+  806A                  ;;Mask in y bits 3,4,5
 17+  806A 7D               ld a,l
 18+  806B E6 38            and 0b00111000
 19+  806D CB 17            rl a
 20+  806F CB 17            rl a
 21+  8071
 22+  8071 B0               or b ;;a now has the proper low byte
 23+  8072 45               ld b,l
 24+  8073 6F               ld l,a ;;Save low byte
 25+  8074
 26+  8074
 27+  8074 78               ld a,b ;;Gather y coord
 28+  8075 E6 07            and 0b00000111
 29+  8077 67               ld h,a
 30+  8078
 31+  8078 78               ld a,b
 32+  8079 E6 C0            and 0b11000000
 33+  807B 1F               rra
 34+  807C 1F               rra
 35+  807D 1F               rra
 36+  807E C6 40            add a,0b01000000
 37+  8080 B4               or h
 38+  8081 67               ld h,a
 39+  8082
 40+  8082 C1               pop bc
 41+  8083 F1               pop af
 42+  8084 C9               ret
# file closed: ./inc/getPixelAddr.inc
  6   8085                  include "mkScreenBlack.inc"
# file opened: ./inc/mkScreenBlack.inc
  1+  8085
  2+  8085              mkScreenBlack:
  3+  8085
  4+  8085 3E 00            ld a,PAPER_BLACK
  5+  8087 CD 9B 22         call CHANGE_BORDER
  6+  808A
  7+  808A 21 00 58         ld hl,COLOR_ATTR_START
  8+  808D 11 00 5B         ld de,COLOR_ATTR_END+1
  9+  8090 F6 07            or INK_WHITE
 10+  8092
 11+  8092 47               ld b,a
 12+  8093              .loop:
 13+  8093 70               ld (hl),b
 14+  8094 23               inc hl
 15+  8095
 16+  8095 7A               ld a,d
 17+  8096 BC               cp h
 18+  8097 C2 93 80         jp nz, .loop
 19+  809A
 20+  809A 7B               ld a,e
 21+  809B BD               cp l
 22+  809C C2 93 80         jp nz, .loop
 23+  809F
 24+  809F C9               ret
# file closed: ./inc/mkScreenBlack.inc
  7   80A0                  include "batchPaint.inc"
# file opened: ./inc/batchPaint.inc
  1+  80A0
  2+  80A0              ;;Arguments in
  3+  80A0              ;;de: start of tile info
  4+  80A0              ;;ix: start addr of coords
  5+  80A0              ;;bc: address after end of coords
  6+  80A0              batchPaint:
  7+  80A0 E5               push hl
  8+  80A1 0B               dec bc ;; And end lable will be off by one address
  9+  80A2
 10+  80A2              .loop
 11+  80A2                  ;;Get current coordinate & print
 12+  80A2 DD 66 01         ld h,(ix+1)
 13+  80A5 DD 6E 00         ld l,(ix)
 14+  80A8 CD 3A 82         call print8x8
 15+  80AB
 16+  80AB                  ;;Get next addr
 17+  80AB DD 23            inc ix
 18+  80AD DD 23            inc ix
 19+  80AF
 20+  80AF DD E5 E1         ld hl,ix
 21+  80B2 ED 42            sbc hl,bc
 22+  80B4 FA A2 80         jp m, .loop
 23+  80B7
 24+  80B7 E1               pop hl
 25+  80B8 C9               ret
 26+  80B9
 27+  80B9              ;;Arguments in
 28+  80B9              ;;a desired attribute byte
 29+  80B9              ;;ix: start addr of coords
 30+  80B9              ;;bc: address after end of coords
 31+  80B9              batchAttr:
 32+  80B9 E5               push hl
 33+  80BA 0B               dec bc
 34+  80BB
 35+  80BB              .loop
 36+  80BB DD 66 01         ld h,(ix+1)
 37+  80BE DD 6E 00         ld l,(ix)
 38+  80C1 CD 58 82         call applyAttrAt
 39+  80C4
 40+  80C4 DD 23            inc ix
 41+  80C6 DD 23            inc ix
 42+  80C8
 43+  80C8 DD E5 E1         ld hl,ix
 44+  80CB ED 42            sbc hl,bc
 45+  80CD
 46+  80CD FA BB 80         jp m, .loop
 47+  80D0
 48+  80D0              .end:
 49+  80D0 E1               pop hl
 50+  80D1 C9               ret
 51+  80D2
# file closed: ./inc/batchPaint.inc
  8   80D2                  include "paintLandscape.inc"
# file opened: ./inc/paintLandscape.inc
  1+  80D2
  2+  80D2              castleCoords:
  3+  80D2 00 00            dw 0x0000
  4+  80D4 00 10            dw 0x1000
  5+  80D6 00 20            dw 0x2000
  6+  80D8 00 30            dw 0x3000
  7+  80DA
  8+  80DA 08 00            dw 0x0008
  9+  80DC 08 08            dw 0x0808
 10+  80DE 08 10            dw 0x1008
 11+  80E0 08 18            dw 0x1808
 12+  80E2 08 20            dw 0x2008
 13+  80E4 08 28            dw 0x2808
 14+  80E6 08 30            dw 0x3008
 15+  80E8
 16+  80E8 10 08            dw 0x0810
 17+  80EA 10 10            dw 0x1010
 18+  80EC 10 18            dw 0x1810
 19+  80EE 10 20            dw 0x2010
 20+  80F0 10 28            dw 0x2810
 21+  80F2
 22+  80F2 18 08            dw 0x0818
 23+  80F4 18 10            dw 0x1018
 24+  80F6 18 18            dw 0x1818
 25+  80F8 18 20            dw 0x2018
 26+  80FA 18 28            dw 0x2818
 27+  80FC
 28+  80FC 20 08            dw 0x0820
 29+  80FE 20 10            dw 0x1020
 30+  8100 20 18            dw 0x1820
 31+  8102 20 20            dw 0x2020
 32+  8104 20 28            dw 0x2820
 33+  8106
 34+  8106 28 08            dw 0x0828
 35+  8108 28 10            dw 0x1028
 36+  810A 28 18            dw 0x1828
 37+  810C 28 20            dw 0x2028
 38+  810E 28 28            dw 0x2828
 39+  8110
 40+  8110 30 08            dw 0x0830
 41+  8112 30 10            dw 0x1030
 42+  8114 30 20            dw 0x2030
 43+  8116 30 28            dw 0x2830
 44+  8118
 45+  8118 38 08            dw 0x0838
 46+  811A 38 10            dw 0x1038
 47+  811C 38 20            dw 0x2038
 48+  811E 38 28            dw 0x2838
 49+  8120              .end
 50+  8120
 51+  8120              castleDoorCoords:
 52+  8120 30 18            dw 0x1830
 53+  8122 38 18            dw 0x1838
 54+  8124              .end
 55+  8124
 56+  8124              paintCastle:
 57+  8124 11 00 80         ld de,cobbleTile
 58+  8127 DD 21 D2 80      ld ix,castleCoords
 59+  812B 01 20 81         ld bc,castleCoords.end
 60+  812E CD A0 80         call batchPaint
 61+  8131
 62+  8131 11 10 80         ld de,barTile
 63+  8134 DD 21 20 81      ld ix,castleDoorCoords
 64+  8138 01 24 81         ld bc,castleDoorCoords.end
 65+  813B CD A0 80         call batchPaint
 66+  813E
 67+  813E 3E 10            ld a,PAPER_RED
 68+  8140 F6 06            or INK_YELLOW
 69+  8142 DD 21 20 81      ld ix,castleDoorCoords
 70+  8146 01 24 81         ld bc,castleDoorCoords.end
 71+  8149 CD B9 80         call batchAttr
 72+  814C C9               ret
 73+  814D
 74+  814D              roadCoords:
 75+  814D 40 18            dw 0x1840
 76+  814F 48 18            dw 0x1848
 77+  8151 50 18            dw 0x1850
 78+  8153 58 18            dw 0x1858
 79+  8155 58 20            dw 0x2058
 80+  8157 58 28            dw 0x2858
 81+  8159 58 30            dw 0x3058
 82+  815B 58 38            dw 0x3858
 83+  815D 58 40            dw 0x4058
 84+  815F 58 48            dw 0x4858
 85+  8161 58 50            dw 0x5058
 86+  8163 60 50            dw 0x5060
 87+  8165 68 50            dw 0x5068
 88+  8167 70 50            dw 0x5070
 89+  8169 70 58            dw 0x5870
 90+  816B 70 60            dw 0x6070
 91+  816D 70 68            dw 0x6870
 92+  816F 70 70            dw 0x7070
 93+  8171
 94+  8171 70 78            dw 0x7870
 95+  8173 70 80            dw 0x8070
 96+  8175 70 88            dw 0x8870
 97+  8177 70 90            dw 0x9070
 98+  8179 70 98            dw 0x9870
 99+  817B 70 A0            dw 0xA070
100+  817D 70 A8            dw 0xA870
101+  817F 68 A8            dw 0xA868
102+  8181 60 A8            dw 0xA860
103+  8183 58 A8            dw 0xA858
104+  8185 58 B0            dw 0xB058
105+  8187 58 B8            dw 0xB858
106+  8189 58 C0            dw 0xC058
107+  818B 58 C8            dw 0xC858
108+  818D 58 D0            dw 0xD058
109+  818F 58 D8            dw 0xD858
110+  8191 58 E0            dw 0xE058
111+  8193 58 E8            dw 0xE858
112+  8195 58 F0            dw 0xF058
113+  8197 58 FF            dw 0xFF58
114+  8199
115+  8199 78 70            dw 0x7078
116+  819B 80 70            dw 0x7080
117+  819D 88 70            dw 0x7088
118+  819F 90 70            dw 0x7090
119+  81A1 98 70            dw 0x7098
120+  81A3 A0 70            dw 0x70A0
121+  81A5 A8 70            dw 0x70A8
122+  81A7 B0 70            dw 0x70B0
123+  81A9
124+  81A9
125+  81A9              .end
126+  81A9              paintRoad:
127+  81A9 11 00 80         ld de,cobbleTile
128+  81AC DD 21 4D 81      ld ix,roadCoords
129+  81B0 01 A9 81         ld bc,roadCoords.end
130+  81B3 CD A0 80         call batchPaint
131+  81B6
132+  81B6 3E 38            ld a,PAPER_WHITE
133+  81B8 F6 00            or INK_BLACK
134+  81BA DD 21 4D 81      ld ix,roadCoords
135+  81BE 01 A9 81         ld bc,roadCoords.end
136+  81C1 CD B9 80         call batchAttr
137+  81C4 C9               ret
138+  81C5
139+  81C5              grassCoords:
140+  81C5 40 58            dw 0x5840
141+  81C7 48 F0            dw 0xF048
142+  81C9 90 28            dw 0x2890
143+  81CB 80 D0            dw 0xD080
144+  81CD              .end
145+  81CD
146+  81CD              paintGrass:
147+  81CD 11 18 80         ld de,grassTile
148+  81D0 DD 21 C5 81      ld ix,grassCoords
149+  81D4 01 CD 81         ld bc, grassCoords.end
150+  81D7 CD A0 80         call batchPaint
151+  81DA
152+  81DA 3E 00            ld a,PAPER_BLACK
153+  81DC F6 04            or INK_GREEN
154+  81DE DD 21 C5 81      ld ix,grassCoords
155+  81E2 01 CD 81         ld bc,grassCoords.end
156+  81E5 CD B9 80         call batchAttr
157+  81E8
158+  81E8 C9               ret
159+  81E9
160+  81E9              horizonCoords:
161+  81E9 30 00            dw 0x0030
162+  81EB 30 30            dw 0x3030
163+  81ED 30 38            dw 0x3830
164+  81EF 30 40            dw 0x4030
165+  81F1 30 48            dw 0x4830
166+  81F3 30 50            dw 0x5030
167+  81F5 30 58            dw 0x5830
168+  81F7 30 60            dw 0x6030
169+  81F9 30 68            dw 0x6830
170+  81FB 30 70            dw 0x7030
171+  81FD 30 78            dw 0x7830
172+  81FF 30 80            dw 0x8030
173+  8201 30 88            dw 0x8830
174+  8203 30 90            dw 0x9030
175+  8205 30 98            dw 0x9830
176+  8207 30 A0            dw 0xA030
177+  8209 30 A8            dw 0xA830
178+  820B 30 B0            dw 0xB030
179+  820D 30 B8            dw 0xB830
180+  820F 30 C0            dw 0xC030
181+  8211 30 C8            dw 0xC830
182+  8213 30 D0            dw 0xD030
183+  8215 30 D8            dw 0xD830
184+  8217 30 E0            dw 0xE030
185+  8219 30 E8            dw 0xE830
186+  821B 30 F0            dw 0xF030
187+  821D 30 FF            dw 0xFF30
188+  821F              .end
189+  821F
190+  821F              paintHorizon:
191+  821F 11 20 80         ld de,grassSurface
192+  8222 DD 21 E9 81      ld ix,horizonCoords
193+  8226 01 1F 82         ld bc,horizonCoords.end
194+  8229 CD A0 80         call batchPaint
195+  822C
196+  822C 11 20 80         ld de,grassSurface
197+  822F DD 21 E9 81      ld ix,horizonCoords
198+  8233 01 1F 82         ld bc,horizonCoords.end
199+  8236 CD B9 80         call batchAttr
200+  8239
201+  8239 C9               ret
# file closed: ./inc/paintLandscape.inc
  9   823A                  include "print8x8.inc"
# file opened: ./inc/print8x8.inc
  1+  823A
  2+  823A              ;; hl:: X,Y Off top left corner in screen ram
  3+  823A              ;; de:: start of tile information
  4+  823A              print8x8:
  5+  823A F5               push af
  6+  823B C5               push bc
  7+  823C D5               push de
  8+  823D E5               push hl
  9+  823E DD E5            push ix
 10+  8240
 11+  8240
 12+  8240 06 08            ld b,8
 13+  8242
 14+  8242              .loop:
 15+  8242 E5 DD E1         ld ix,hl
 16+  8245 CD 5E 80         call getPixelAddr
 17+  8248
 18+  8248 1A               ld a,(de)
 19+  8249 77               ld (hl),a
 20+  824A 13               inc de
 21+  824B
 22+  824B DD E5 E1         ld hl,ix
 23+  824E 2C               inc l
 24+  824F 10 F1            djnz .loop
 25+  8251
 26+  8251              .cont:
 27+  8251 DD E1            pop ix
 28+  8253 E1               pop hl
 29+  8254 D1               pop de
 30+  8255 C1               pop bc
 31+  8256 F1               pop af
 32+  8257 C9               ret
 33+  8258
 34+  8258              ;a:  the attribute to be applied
 35+  8258              ;hl: the coord of the attribute
 36+  8258              applyAttrAt:
 37+  8258 C5               push bc
 38+  8259 D5               push de
 39+  825A F5               push af
 40+  825B E5               push hl
 41+  825C
 42+  825C 4F               ld c,a ;;Save attribute
 43+  825D
 44+  825D                  ;;Divide by 8 to find attr coords
 45+  825D 7C               ld a,h
 46+  825E CB 3F            srl a
 47+  8260 CB 3F            srl a
 48+  8262 CB 3F            srl a
 49+  8264 67               ld h,a
 50+  8265
 51+  8265 7D               ld a,l
 52+  8266 CB 3F            srl a
 53+  8268 CB 3F            srl a
 54+  826A CB 3F            srl a
 55+  826C 6F               ld l,a
 56+  826D
 57+  826D              ;;hl now contains the coords of
 58+  826D              ;;the location in screen attr mem
 59+  826D              ;;we now need to convert that to
 60+  826D              ;;a linear location
 61+  826D
 62+  826D 44               ld b,h
 63+  826E 65               ld h,l
 64+  826F 68               ld l,b
 65+  8270
 66+  8270 44               ld b,h
 67+  8271 26 00            ld h,00
 68+  8273 11 20 00         ld de,32
 69+  8276              .mul_loop:
 70+  8276 19               add hl,de
 71+  8277 10 FD            djnz .mul_loop
 72+  8279
 73+  8279              ;;Apply attribute and clean up
 74+  8279 11 00 58         ld de,COLOR_ATTR_START
 75+  827C 19               add hl,de
 76+  827D 71               ld (hl),c
 77+  827E
 78+  827E 79               ld a,c
 79+  827F E1               pop hl
 80+  8280 F1               pop af
 81+  8281 D1               pop de
 82+  8282 C1               pop bc
 83+  8283 C9               ret
# file closed: ./inc/print8x8.inc
 10   8284                  include "mainLoop.inc"
# file opened: ./inc/mainLoop.inc
  1+  8284              mainLoop:
  2+  8284 CD F2 83         call monsterHandler
  3+  8287 CD AA 82         call playerHandler
  4+  828A
  5+  828A CD 91 82         call timeDelay
  6+  828D 18 F5            jr mainLoop
  7+  828F
  8+  828F              DelayLength:
  9+  828F FF FF            dw 0xFFFF
 10+  8291              timeDelay:
 11+  8291 E5               push hl
 12+  8292 F5               push af
 13+  8293
 14+  8293 AF               xor a
 15+  8294 2A 8F 82         ld hl,(DelayLength)
 16+  8297
 17+  8297              .loop:
 18+  8297 2B               dec hl
 19+  8298 BC               cp h
 20+  8299 C2 97 82         jp nz,.loop
 21+  829C BD               cp l
 22+  829D C2 97 82         jp nz,.loop
 23+  82A0
 24+  82A0              .exit:
 25+  82A0 F1               pop af
 26+  82A1 E1               pop hl
 27+  82A2 C9               ret
 28+  82A3
# file closed: ./inc/mainLoop.inc
 11   82A3                  include "playerHandler.inc"
# file opened: ./inc/playerHandler.inc
  1+  82A3
  2+  82A3              CastleHP:
  3+  82A3 64               db 64h
  4+  82A4
  5+  82A4              Player:
  6+  82A4              .curSpriteID
  7+  82A4 00               db 00h
  8+  82A5              .curHealth
  9+  82A5 10               db 10h
 10+  82A6              .curPos
 11+  82A6 80 80            dw 8080h
 12+  82A8              .lastPos
 13+  82A8 90 90            dw 9090h
 14+  82AA              .outOfBoundsX    equ 31h
 15+  82AA              .outOfBoundsY    equ 39h
 16+  82AA
 17+  82AA              playerHandler:
 18+  82AA CD B4 82         call MovePlayer
 19+  82AD CD 09 83         call DrawPlayer
 20+  82B0 CD 23 83         call RepaintOldPlayerPosition
 21+  82B3              .exit
 22+  82B3 C9               ret
 23+  82B4
 24+  82B4              MovePlayer:
 25+  82B4 C5               push bc
 26+  82B5 F5               push af
 27+  82B6 E5               push hl
 28+  82B7
 29+  82B7 2A A6 82         ld hl,(Player.curPos)
 30+  82BA
 31+  82BA              .readInKeys:
 32+  82BA 01 FE FD         ld bc,READ_ASDFG
 33+  82BD ED 78            in a,(c)
 34+  82BF
 35+  82BF CB 47            bit KEY_BIT_A,a
 36+  82C1 28 23            jr z, .moveLeft
 37+  82C3
 38+  82C3 CB 4F            bit KEY_BIT_S,a
 39+  82C5 28 17            jr z, .moveDown
 40+  82C7
 41+  82C7 CB 57            bit KEY_BIT_D,a
 42+  82C9 28 23            jr z,.moveRight
 43+  82CB
 44+  82CB 01 FE FB         ld bc,READ_QWERT
 45+  82CE ED 78            in a,(c)
 46+  82D0 CB 4F            bit KEY_BIT_W,a
 47+  82D2 28 02            jr z,.moveUp
 48+  82D4
 49+  82D4 18 2F            jr .exit
 50+  82D6
 51+  82D6              .moveUp:
 52+  82D6 44 4D            ld bc,hl ;;Save old coords in bc, so they can be saved in memory later
 53+  82D8 7D               ld a,l
 54+  82D9 D6 08            sub 08h
 55+  82DB 6F               ld l,a
 56+  82DC 18 18            jr .checkBounds
 57+  82DE              .moveDown:
 58+  82DE 44 4D            ld bc,hl
 59+  82E0 7D               ld a,l
 60+  82E1 C6 08            add a,08h
 61+  82E3 6F               ld l,a
 62+  82E4 18 10            jr .checkBounds
 63+  82E6              .moveLeft:
 64+  82E6 44 4D            ld bc,hl
 65+  82E8 7C               ld a,h
 66+  82E9 D6 08            sub 08h
 67+  82EB 67               ld h,a
 68+  82EC 18 08            jr .checkBounds
 69+  82EE              .moveRight:
 70+  82EE 44 4D            ld bc,hl
 71+  82F0 7C               ld a,h
 72+  82F1 C6 08            add a,08h
 73+  82F3 67               ld h,a
 74+  82F4 18 00            jr .checkBounds
 75+  82F6
 76+  82F6              .checkBounds:
 77+  82F6 7D               ld a,l
 78+  82F7 FE C0            cp 0xC0
 79+  82F9 FA FE 82         jp m,.saveAndExit
 80+  82FC
 81+  82FC 18 07            jr .exit
 82+  82FE
 83+  82FE              .saveAndExit:
 84+  82FE ED 43 A8 82      ld (Player.lastPos),bc
 85+  8302 22 A6 82         ld (Player.curPos),hl
 86+  8305
 87+  8305              .exit
 88+  8305 E1               pop hl
 89+  8306 F1               pop af
 90+  8307 C1               pop bc
 91+  8308 C9               ret
 92+  8309
 93+  8309              DrawPlayer:
 94+  8309 E5               push hl
 95+  830A D5               push de
 96+  830B F5               push af
 97+  830C
 98+  830C 2A A6 82         ld hl,(Player.curPos)
 99+  830F 11 30 80         ld de,playerSprite
100+  8312 CD 3A 82         call print8x8
101+  8315
102+  8315 2A A6 82         ld hl,(Player.curPos)
103+  8318 3E 38            ld a,PAPER_WHITE
104+  831A F6 03            or INK_PINK
105+  831C CD 58 82         call applyAttrAt
106+  831F
107+  831F              .exit:
108+  831F F1               pop af
109+  8320 D1               pop de
110+  8321 E1               pop hl
111+  8322 C9               ret
112+  8323
113+  8323              RepaintOldPlayerPosition:
114+  8323 D5               push de
115+  8324 DD E5            push ix
116+  8326 C5               push bc
117+  8327 E5               push hl
118+  8328 F5               push af
119+  8329
120+  8329 DD 21 4D 81      ld ix,roadCoords
121+  832D 21 A9 81         ld hl,roadCoords.end
122+  8330 11 4D 81         ld de,roadCoords
123+  8333 ED 52            sbc hl,de
124+  8335 44 4D            ld bc,hl
125+  8337 2A A8 82         ld hl,(Player.lastPos)
126+  833A CD 40 80         call cpdr16
127+  833D 28 41            jr z,.paintRoadOnOldPlayerLoc
128+  833F
129+  833F DD 21 20 81      ld ix,castleDoorCoords
130+  8343 21 24 81         ld hl,castleDoorCoords.end
131+  8346 11 20 81         ld de,castleDoorCoords
132+  8349 ED 52            sbc hl,de
133+  834B 44 4D            ld bc,hl
134+  834D 2A A8 82         ld hl,(Player.lastPos)
135+  8350 CD 40 80         call cpdr16
136+  8353 28 55            jr z,.paintDoorOnOldPlayerLoc
137+  8355
138+  8355 DD 21 C5 81      ld ix,grassCoords
139+  8359 21 CD 81         ld hl,grassCoords.end
140+  835C 11 C5 81         ld de,grassCoords
141+  835F ED 52            sbc hl,de
142+  8361 44 4D            ld bc,hl
143+  8363 2A A8 82         ld hl,(Player.lastPos)
144+  8366 CD 40 80         call cpdr16
145+  8369 28 2A            jr z,.paintGrassOnOldPlayerLoc
146+  836B
147+  836B              .paintBlackOnOldPlayerLoc:
148+  836B 2A A8 82         ld hl,(Player.lastPos)
149+  836E 11 38 80         ld de,emptyTile
150+  8371 CD 3A 82         call print8x8
151+  8374
152+  8374 2A A8 82         ld hl,(Player.lastPos)
153+  8377 3E 00            ld a,PAPER_BLACK
154+  8379 F6 07            or INK_WHITE
155+  837B CD 58 82         call applyAttrAt
156+  837E
157+  837E 18 3F            jr .exit
158+  8380
159+  8380              .paintRoadOnOldPlayerLoc:
160+  8380 2A A8 82         ld hl,(Player.lastPos)
161+  8383 11 00 80         ld de,cobbleTile
162+  8386 CD 3A 82         call print8x8
163+  8389
164+  8389
165+  8389 2A A8 82         ld hl,(Player.lastPos)
166+  838C 3E 38            ld a,PAPER_WHITE
167+  838E F6 00            or INK_BLACK
168+  8390 CD 58 82         call applyAttrAt
169+  8393
170+  8393 18 2A            jr .exit
171+  8395
172+  8395              .paintGrassOnOldPlayerLoc:
173+  8395 2A A8 82         ld hl,(Player.lastPos)
174+  8398 11 18 80         ld de, grassTile
175+  839B CD 3A 82         call print8x8
176+  839E
177+  839E 2A A8 82         ld hl,(Player.lastPos)
178+  83A1 3E 00            ld a,PAPER_BLACK
179+  83A3 F6 04            or INK_GREEN
180+  83A5 CD 58 82         call applyAttrAt
181+  83A8
182+  83A8 18 15            jr .exit
183+  83AA
184+  83AA              .paintDoorOnOldPlayerLoc:
185+  83AA 2A A8 82         ld hl,(Player.lastPos)
186+  83AD 11 10 80         ld de,barTile
187+  83B0 CD 3A 82         call print8x8
188+  83B3
189+  83B3 2A A8 82         ld hl,(Player.lastPos)
190+  83B6 3E 10            ld a,PAPER_RED
191+  83B8 F6 06            or INK_YELLOW
192+  83BA CD 58 82         call applyAttrAt
193+  83BD
194+  83BD 18 00            jr .exit
195+  83BF              .exit
196+  83BF F1               pop af
197+  83C0 E1               pop hl
198+  83C1 C1               pop bc
199+  83C2 DD E1            pop ix
200+  83C4 D1               pop de
201+  83C5 C9               ret
# file closed: ./inc/playerHandler.inc
 12   83C6
 13   83C6              start:
 14   83C6 ED 56            im 1
 15   83C8 31 57 FF         ld sp,USER_RAM_END
 16   83CB
 17   83CB CD AF 0D         call CLR_SCREEN
 18   83CE CD 85 80         call mkScreenBlack
 19   83D1 CD 24 81         call paintCastle
 20   83D4 CD A9 81         call paintRoad
 21   83D7 CD CD 81         call paintGrass
 22   83DA CD 1F 82         call paintHorizon
 23   83DD
 24   83DD 0E 01            ld c,1
 25   83DF 16 03            ld d,03h
 26   83E1 1E 01            ld e,1
 27   83E3 CD FC 83         call AllocMonster
 28   83E6
 29   83E6 0E 02            ld c,2
 30   83E8 16 05            ld d,05h
 31   83EA 1E 00            ld e,0
 32   83EC CD FC 83         call AllocMonster
 33   83EF
 34   83EF CD 84 82         call mainLoop
 35   83F2
 36   83F2                  include "monster.inc"
# file opened: ./inc/monster.inc
  1+  83F2              ;;Add any new monsters
  2+  83F2              ;;Remove any dead monsters
  3+  83F2              ;;Update monster positions
  4+  83F2              ;;Redraw monsters
  5+  83F2              monsterHandler:
  6+  83F2              .clearTheDead:
  7+  83F2 CD 3B 84         call ClearDeadMonsters
  8+  83F5
  9+  83F5              .drawMonsters:
 10+  83F5 CD 02 85         call DrawMonsterHeap
 11+  83F8
 12+  83F8              .moveMonsters:
 13+  83F8 CD A0 85         call UpdateMonsterPositions
 14+  83FB
 15+  83FB              .exit:
 16+  83FB C9               ret
 17+  83FC
 18+  83FC
 19+  83FC
 20+  83FC              ;;Monster Heap Entry Format
 21+  83FC              ;; Byte 0: Monster Sprite
 22+  83FC              ;; Byte 1: Health Point of Monster
 23+  83FC              ;; Byte 2: The path the monster is taking
 24+  83FC              ;; Byte 3: Index in path the monster is on
 25+  83FC
 26+  83FC              ;; Arguments:
 27+  83FC              ;; c: Sprite
 28+  83FC              ;; d: Health Points
 29+  83FC              ;; e: path
 30+  83FC              AllocMonster:
 31+  83FC C5               push bc
 32+  83FD DD E5            push ix
 33+  83FF
 34+  83FF DD 21 45 86      ld ix,MonsterHeap.startOfHeap
 35+  8403
 36+  8403 3A 44 86         ld a,(MonsterHeap.numActiveMonsters)
 37+  8406 FE 00            cp 0
 38+  8408 28 0B            jr z, .insertDataToHeap
 39+  840A
 40+  840A 47               ld b,a
 41+  840B              .addrCalcLoop
 42+  840B DD 23            inc ix
 43+  840D DD 23            inc ix
 44+  840F DD 23            inc ix
 45+  8411 DD 23            inc ix
 46+  8413
 47+  8413 10 F6            djnz .addrCalcLoop
 48+  8415
 49+  8415              .insertDataToHeap
 50+  8415 DD 71 00         ld (ix),c
 51+  8418 DD 72 01         ld (ix+1),d
 52+  841B DD 73 02         ld (ix+2),e
 53+  841E DD 36 03 00      ld (ix+3),0 ;Start monster on start of path
 54+  8422
 55+  8422 DD 54 DD 5D      ld de,ix
 56+  8426 DD 21 42 86      ld ix,MonsterHeap.locOfLastMonster
 57+  842A DD 73 00 DD      ld (ix),de
 57+  842E 72 01
 58+  8430
 59+  8430 DD 21 44 86      ld ix,MonsterHeap.numActiveMonsters
 60+  8434 DD 34 00         inc (ix)
 61+  8437
 62+  8437              .exit
 63+  8437 DD E1            pop ix
 64+  8439 C1               pop bc
 65+  843A C9               ret
 66+  843B
 67+  843B              ClearDeadMonsters:
 68+  843B DD E5            push ix
 69+  843D C5               push bc
 70+  843E F5               push af
 71+  843F FD E5            push iy
 72+  8441 D5               push de
 73+  8442 E5               push hl
 74+  8443
 75+  8443 3A 44 86         ld a,(MonsterHeap.numActiveMonsters)
 76+  8446 FE 00            cp 0
 77+  8448 CA F9 84         jp z, .exit
 78+  844B
 79+  844B 47               ld b,a
 80+  844C DD 21 45 86      ld ix,MonsterHeap.startOfHeap
 81+  8450
 82+  8450              .loop:
 83+  8450 3A 44 86         ld a,(MonsterHeap.numActiveMonsters)
 84+  8453 FE 01            cp 1
 85+  8455 28 61            jr z, .clearLastMonster
 86+  8457
 87+  8457 DD 7E 01         ld a,(ix+1) ;;Load in health of current monster
 88+  845A FE 00            cp 0
 89+  845C 20 4E            jr nz, .continue
 90+  845E
 91+  845E              .drawOverDeadMonster:
 92+  845E DD 66 02         ld h,(ix+2)
 93+  8461 DD 6E 03         ld l,(ix+3)
 94+  8464 2D               dec l
 95+  8465
 96+  8465 CD 6E 85         call getPathCoords
 97+  8468 11 00 80         ld de,cobbleTile
 98+  846B CD 3A 82         call print8x8
 99+  846E
100+  846E 3E 38            ld a,PAPER_WHITE
101+  8470 F6 00            or INK_BLACK
102+  8472 CD 58 82         call applyAttrAt
103+  8475
104+  8475              .decMonsterCount:
105+  8475 FD 2A 42 86      ld iy,(MonsterHeap.locOfLastMonster)
106+  8479
107+  8479 FD 4E 00         ld c,(iy)
108+  847C DD 71 00         ld (ix),c
109+  847F
110+  847F FD 4E 01         ld c,(iy+1)
111+  8482 DD 71 01         ld (ix+1),c
112+  8485
113+  8485 FD 4E 02         ld c,(iy+2)
114+  8488 DD 71 02         ld (ix+2),c
115+  848B
116+  848B FD 4E 03         ld c,(iy+3)
117+  848E DD 71 03         ld (ix+3),c
118+  8491
119+  8491 FD 21 42 86      ld iy,MonsterHeap.locOfLastMonster
120+  8495 FD 35 00         dec (iy)
121+  8498 FD 35 00         dec (iy)
122+  849B FD 35 00         dec (iy)
123+  849E FD 35 00         dec (iy)
124+  84A1
125+  84A1 FD 21 44 86      ld iy, MonsterHeap.numActiveMonsters
126+  84A5 FD 35 00         dec (iy)
127+  84A8
128+  84A8 10 A6            djnz .loop
129+  84AA 18 4D            jr .exit
130+  84AC
131+  84AC              .continue
132+  84AC DD 23            inc ix
133+  84AE DD 23            inc ix
134+  84B0 DD 23            inc ix
135+  84B2 DD 23            inc ix
136+  84B4 10 9A            djnz .loop
137+  84B6 18 41            jr .exit
138+  84B8
139+  84B8              .clearLastMonster:
140+  84B8                  ;;If monster is not dead, jump to exit
141+  84B8 DD 21 45 86      ld ix, MonsterHeap.startOfHeap
142+  84BC DD 7E 01         ld a,(ix+1)
143+  84BF FE 00            cp 0
144+  84C1 C2 F9 84         jp nz, .exit
145+  84C4
146+  84C4 DD 66 02         ld h,(ix+2)
147+  84C7 DD 6E 03         ld l,(ix+3)
148+  84CA 2D               dec l
149+  84CB
150+  84CB CD 6E 85         call getPathCoords
151+  84CE 11 00 80         ld de,cobbleTile
152+  84D1 CD 3A 82         call print8x8
153+  84D4
154+  84D4 3E 38            ld a,PAPER_WHITE
155+  84D6 F6 00            or INK_BLACK
156+  84D8 CD 58 82         call applyAttrAt
157+  84DB
158+  84DB FD 21 42 86      ld iy,MonsterHeap.locOfLastMonster
159+  84DF FD 35 00         dec (iy)
160+  84E2 FD 35 00         dec (iy)
161+  84E5 FD 35 00         dec (iy)
162+  84E8 FD 35 00         dec (iy)
163+  84EB
164+  84EB DD 21 44 86      ld ix, MonsterHeap.numActiveMonsters
165+  84EF DD 35 00         dec (ix)
166+  84F2
167+  84F2 DD 66 02         ld h,(ix+2)
168+  84F5 DD 6E 03         ld l,(ix+3)
169+  84F8 2D               dec l
170+  84F9
171+  84F9              .exit:
172+  84F9 E1               pop hl
173+  84FA D1               pop de
174+  84FB FD E1            pop iy
175+  84FD F1               pop af
176+  84FE C1               pop bc
177+  84FF DD E1            pop ix
178+  8501 C9               ret
179+  8502
180+  8502              DrawMonsterHeap:
181+  8502 DD E5            push ix
182+  8504 F5               push af
183+  8505 C5               push bc
184+  8506 E5               push hl
185+  8507 D5               push de
186+  8508 FD E5            push iy
187+  850A
188+  850A DD 21 45 86      ld ix, MonsterHeap.startOfHeap
189+  850E 3A 44 86         ld a, (MonsterHeap.numActiveMonsters)
190+  8511 FE 00            cp 0
191+  8513 CA 65 85         jp z, .exit
192+  8516
193+  8516 47               ld b,a
194+  8517
195+  8517              .loop:
196+  8517 DD 66 02         ld h,(ix+2) ;;Id of path monster is on
197+  851A DD 6E 03         ld l,(ix+3) ;;Index on path monster is taking
198+  851D
199+  851D CD 6E 85         call getPathCoords ;Convert path info to coordinates
200+  8520                  ;;hl now has coords
201+  8520
202+  8520                  ;;If we are on the last coord, then the monster
203+  8520                  ;;is at the end of it's path
204+  8520 ED 5B C2 85      ld de,(monsterPathOne) ;;
205+  8524 ED 52            sbc hl,de
206+  8526 20 0B            jr nz, .drawMonster
207+  8528
208+  8528              .killMonsterAtEndOfPath:
209+  8528 DD 36 01 00      ld (ix+1),0
210+  852C FD 21 A3 82      ld iy,CastleHP
211+  8530 FD 35 00         dec (iy)
212+  8533
213+  8533              .drawMonster:
214+  8533 19               add hl,de
215+  8534 11 28 80         ld de,skullTile
216+  8537 CD 3A 82         call print8x8
217+  853A
218+  853A 3E 38            ld a,PAPER_WHITE
219+  853C F6 02            or INK_RED
220+  853E CD 58 82         call applyAttrAt
221+  8541
222+  8541              .reDrawOldLocation:
223+  8541 DD 66 02         ld h,(ix+2)
224+  8544 DD 6E 03         ld l,(ix+3)
225+  8547 2D               dec l
226+  8548
227+  8548 FA 5B 85         jp m, .continue
228+  854B
229+  854B CD 6E 85         call getPathCoords
230+  854E 11 00 80         ld de,cobbleTile
231+  8551 CD 3A 82         call print8x8
232+  8554
233+  8554 3E 38            ld a,PAPER_WHITE
234+  8556 F6 00            or INK_BLACK
235+  8558 CD 58 82         call applyAttrAt
236+  855B
237+  855B              .continue
238+  855B DD 23            inc ix
239+  855D DD 23            inc ix
240+  855F DD 23            inc ix
241+  8561 DD 23            inc ix
242+  8563 10 B2            djnz .loop
243+  8565
244+  8565              .exit:
245+  8565 FD E1            pop iy
246+  8567 D1               pop de
247+  8568 E1               pop hl
248+  8569 C1               pop bc
249+  856A F1               pop af
250+  856B DD E1            pop ix
251+  856D C9               ret
252+  856E
253+  856E              getPathCoords:
254+  856E F5               push af
255+  856F D5               push de
256+  8570
257+  8570 54 5D            ld de,hl
258+  8572 13               inc de
259+  8573
260+  8573              .getPathInfoAddr:
261+  8573 7C               ld a,h
262+  8574 FE 00            cp 0
263+  8576 28 08            jr z, .ldPathOne
264+  8578
265+  8578 FE 01            cp 1
266+  857A 28 09            jr z, .ldPathTwo
267+  857C
268+  857C FE 02            cp 2
269+  857E 28 0A            jr z, .ldPathThree
270+  8580
271+  8580              .ldPathOne:
272+  8580 21 F6 85         ld hl, monsterPathOne.end
273+  8583 18 0A            jr .addIndex
274+  8585
275+  8585              .ldPathTwo:
276+  8585 21 42 86         ld hl, monsterPathTwo.end
277+  8588 18 05            jr .addIndex
278+  858A
279+  858A              .ldPathThree:
./inc/monster.inc(280): error: Label not found: monsterPathThree.end
280+  858A 21 00 00         ld hl, monsterPathThree.end
281+  858D 18 00            jr .addIndex
282+  858F
283+  858F              .addIndex:
284+  858F 16 00            ld d,0
285+  8591 B7 ED 52         sub hl,de
286+  8594 B7 ED 52         sub hl,de
287+  8597 5E 23 56 2B      ld de,(hl)
288+  859B 62 6B            ld hl,de
289+  859D
290+  859D              .exit:
291+  859D D1               pop de
292+  859E F1               pop af
293+  859F C9               ret
294+  85A0
295+  85A0              UpdateMonsterPositions:
296+  85A0 DD E5            push ix
297+  85A2 C5               push bc
298+  85A3 F5               push af
299+  85A4
300+  85A4 3A 44 86         ld a,(MonsterHeap.numActiveMonsters)
301+  85A7 FE 00            cp 0
302+  85A9 28 12            jr z, .exit
303+  85AB
304+  85AB 47               ld b,a
305+  85AC
306+  85AC DD 21 45 86      ld ix,MonsterHeap.startOfHeap
307+  85B0              .loop:
308+  85B0 DD 34 03         inc (ix+3)
309+  85B3
310+  85B3 DD 23            inc ix
311+  85B5 DD 23            inc ix
312+  85B7 DD 23            inc ix
313+  85B9 DD 23            inc ix
314+  85BB 10 F3            djnz .loop
315+  85BD
316+  85BD              .exit:
317+  85BD F1               pop af
318+  85BE C1               pop bc
319+  85BF DD E1            pop ix
320+  85C1 C9               ret
321+  85C2
322+  85C2
323+  85C2              monsterPathOne:
324+  85C2 40 18            dw 0x1840
325+  85C4 48 18            dw 0x1848
326+  85C6 50 18            dw 0x1850
327+  85C8 58 18            dw 0x1858
328+  85CA 58 20            dw 0x2058
329+  85CC 58 28            dw 0x2858
330+  85CE 58 30            dw 0x3058
331+  85D0 58 38            dw 0x3858
332+  85D2 58 40            dw 0x4058
333+  85D4 58 48            dw 0x4858
334+  85D6 58 50            dw 0x5058
335+  85D8 60 50            dw 0x5060
336+  85DA 68 50            dw 0x5068
337+  85DC 70 50            dw 0x5070
338+  85DE 70 58            dw 0x5870
339+  85E0 70 60            dw 0x6070
340+  85E2 70 68            dw 0x6870
341+  85E4
342+  85E4 70 70            dw 0x7070
343+  85E6 78 70            dw 0x7078
344+  85E8 80 70            dw 0x7080
345+  85EA 88 70            dw 0x7088
346+  85EC 90 70            dw 0x7090
347+  85EE 98 70            dw 0x7098
348+  85F0 A0 70            dw 0x70A0
349+  85F2 A8 70            dw 0x70A8
350+  85F4 B0 70            dw 0x70B0
351+  85F6
352+  85F6              .end
353+  85F6
354+  85F6              monsterPathTwo:
355+  85F6 40 18            dw 0x1840
356+  85F8 48 18            dw 0x1848
357+  85FA 50 18            dw 0x1850
358+  85FC 58 18            dw 0x1858
359+  85FE 58 20            dw 0x2058
360+  8600 58 28            dw 0x2858
361+  8602 58 30            dw 0x3058
362+  8604 58 38            dw 0x3858
363+  8606 58 40            dw 0x4058
364+  8608 58 48            dw 0x4858
365+  860A 58 50            dw 0x5058
366+  860C 60 50            dw 0x5060
367+  860E 68 50            dw 0x5068
368+  8610 70 50            dw 0x5070
369+  8612 70 58            dw 0x5870
370+  8614 70 60            dw 0x6070
371+  8616 70 68            dw 0x6870
372+  8618 70 70            dw 0x7070
373+  861A
374+  861A 70 78            dw 0x7870
375+  861C 70 80            dw 0x8070
376+  861E 70 88            dw 0x8870
377+  8620 70 90            dw 0x9070
378+  8622 70 98            dw 0x9870
379+  8624 70 A0            dw 0xA070
380+  8626 70 A8            dw 0xA870
381+  8628 68 A8            dw 0xA868
382+  862A 60 A8            dw 0xA860
383+  862C 58 A8            dw 0xA858
384+  862E 58 B0            dw 0xB058
385+  8630 58 B8            dw 0xB858
386+  8632 58 C0            dw 0xC058
387+  8634 58 C8            dw 0xC858
388+  8636 58 D0            dw 0xD058
389+  8638 58 D8            dw 0xD858
390+  863A 58 E0            dw 0xE058
391+  863C 58 E8            dw 0xE858
392+  863E 58 F0            dw 0xF058
393+  8640 58 FF            dw 0xFF58
394+  8642              .end
395+  8642
396+  8642              MonsterHeap:
397+  8642              .locOfLastMonster:
398+  8642 00 00            dw 0000h
399+  8644              .numActiveMonsters:
400+  8644 00               db 00h
401+  8645              .startOfHeap
402+  8645
403+  8645                  savesna "out.sna",start
# file closed: ./inc/monster.inc
 37   8645
# file closed: ./main.asm
